>> """
>>  Title: recurrence_functions.py
    
>>   Author:  Duncan Gray, duncan.gray@ga.gov.au
              
>>   Description: Functions to calculate the event activity.
    
>>   Version: $Revision: 965 $  
>>   ModifiedBy: $Author: dgray $
>>   ModifiedDate: $Date: 2009-05-20 15:56:38 +1000 (Wed, 20 May 2009) $
     
>>   Copyright 2007 by Geoscience Australia
>> """
   
!> from scipy import exp, log, sum, zeros, array, newaxis, where, allclose, r_
   
   
!> def calc_event_activity(event_set, sources, nbins, weight):
!>     """
!>     event_set - Event_Set instance - this function uses Mw and rupture_centroid
!>                                and returns a subset of event_set
!>     sources - a list of Source_Models.  Why this dimension? 
!>     nbin - number of bins desired?
   
!>     when analysis uses this function, the weight used is a constant of [1.0]
!>     """
       # print "event_set", event_set
       # print "sources", sources
       # print "nbins", nbins
       #import sys; sys.exit()
       
>>     assert len(weight) == len(sources)
           
>>     event_activity_matrix=zeros((len(event_set),len(sources)),float)
>>     weight_matrix=zeros((len(event_set),len(sources)),float)
   
       
       # A hacky way of finding the source_zone_id
       # There should really be a source zone object that is
       # used by event set as well
       # And this should know about source_zone_id's.
>>     for j in range(len(sources)): # loop over all source models
           # print "sources[j]", sources[j]
           #import sys; sys.exit() 
>>         for i in range(len(sources[j])): # loop over source zones 
>>             source=sources[j][i]
               #print "source in rf", source
               #print 'LAMBDAMIN',source.Lambda_Min
>>             zone_m0=source.min_magnitude            
>>             zone_mlow=max(source.min_mag_cutoff,zone_m0)
>>             zone_mhgh=source.max_magnitude
>>             zone_b=source.b
>>             zone_f_gr=source.Lambda_Min
   
>>             grfctr=grscale(zone_b,zone_mhgh,zone_mlow,zone_m0)
>>             A_mlow=zone_f_gr*grfctr
               # print "zone_f_gr", zone_f_gr
               # print "grfctr",grfctr 
               # print "A_mlow",A_mlow
   
               #print "zone_mlow",zone_mlow
               #print "zone_mhgh", zone_mhgh
>>             mag_ind=where((zone_mlow<event_set.Mw)&
>>                           (event_set.Mw<zone_mhgh))[0]
               #print "mag_ind", mag_ind
               #import sys; sys.exit()
               # WAY ONE - to get the poly_id - probably slow
               # Does the source contain an event set rupture centroid
               # Get the events in this source zone.
               # mag_ind limits the events checked.
               # This info could already be known, since EQRM generated the events
               # Should this function only be used on generated events though?
               #print "event_set.rupture_centroid_lat[mag_ind]",event_set.rupture_centroid_lat[mag_ind] 
               #print "event_set.rupture_centroid_lon[mag_ind]", event_set.rupture_centroid_lon[mag_ind]
>>             contains_point=[source.contains_point((lat,lon)) for
>>                             lat,lon in zip(
>>                                 event_set.rupture_centroid_lat[mag_ind],
>>                                 event_set.rupture_centroid_lon[mag_ind])]
>>             poly_ind=where(contains_point)[0]
               #print "poly_ind", poly_ind
               #print "contains_point", contains_point
               
               #print "sources[j].weight", sources[j].weight
>>             if len(poly_ind)>0:
                   # print "poly_ind", poly_ind
>>                 event_ind=mag_ind[poly_ind]
                   #print "event_ind", event_ind
                   # make bins
>>                 mag_bin_centroids=make_bins(zone_mlow,zone_mhgh,
>>                                             nbins)
   
                   # bin the event magnitudes
>>                 delta_mag=(zone_mhgh-zone_mlow)/nbins
>>                 event_bins=array([int(i) for i in
>>                                   (event_set.Mw[event_ind]
>>                                    -zone_mlow)/delta_mag])
                   #event_bins=mag_bin_centroids[event_bins]
                   # print "zone_b", zone_b
                   #print "mag_bin_centroids",mag_bin_centroids
                   #print "zone_mlow",zone_mlow
                   #print "zone_mhgh",zone_mhgh
>>                 grpdf=m2grpdfb(zone_b,mag_bin_centroids,zone_mlow,zone_mhgh)
                   #print "grpdf", grpdf
                   #print "A_mlow", A_mlow
                   #print "nbins", nbins
>>                 event_activity=(nbins*A_mlow
>>                                 *grpdf[event_bins]/len(event_ind))
                   #print "event_activity", event_activity
>>                 event_activity_matrix[event_ind,j]=event_activity
>>                 weight_matrix[event_ind,j]=weight[j]
                   # print "sources[j].weight", sources[j].weight
               #endif
           #endfor
       #endfor
   
       # FIXME(DSG) - Make the weight_matrix an object. These calc's
       # should occur in this object.
       # Then this object can be tested seperately
       
       #print "weight_matrix", weight_matrix
>>     weight_sum=weight_matrix.sum(axis=1)
>>     non_zerod_ind=where(weight_sum!=0)[0]
       #print 'zero_ind',where(weight_sum==0)[0]
       #print "len(non_zerod_ind)", len(non_zerod_ind)
       #print 'len(zero_ind)',len(where(weight_sum==0)[0]) # this is 4 indexes
       #print event_set[where(weight_sum==0)[0]].Mw,event_set[where(weight_sum==0)[0]].rupture_centroid_lat,event_set[where(weight_sum==0)[0]].rupture_centroid_lon
>>     weight_matrix=weight_matrix[non_zerod_ind,:]/weight_sum[
>>         non_zerod_ind][:,newaxis]
   
       # test that the normalised weight matrix sums to 1 for all events:
>>     if not (weight_matrix.sum(axis=1)==1).all():
!!         raise Exception('weight_matrix did not sum to 1')
>>     event_activity=event_activity_matrix[non_zerod_ind,:]*weight_matrix
>>     event_activity=event_activity.sum(axis=1)
       #print "event_activity", event_activity
        # create a sub set of the current events.
>>     new_event_set=event_set[non_zerod_ind]
       # FIXME(DSG) Think about the object design.
       # Maybe this method sould be within event set, since it
       # is adding an attribute to event_set
>>     new_event_set.set_event_activity(event_activity)
       #print "new_event_set.event_activity", new_event_set.event_activity
       # returning an event set with the attribute event_activity tacked on.
>>     return new_event_set
                   
   
!> def m2grpdfb(b,m,m0,mmax):
!>     """
!>     from matlab;
!>     Computes the PDF, fm for the bounded Gutenberg-Richter distribution.
!>     This is eq3.4, page 32, of v3.0 of the manual.
!>     % m2grpdfb: returns GR pdf given b, [m0,mmax] and magnitude array
!> %
!> % USE:     pdf = m2grpdfb(b,m,m0,mmax)
!> %                b:     scalar b-value
!> %                m:     array of magnitudes
!> %                m0:    scalar lower GR m
!> %                mmax:  scalar upper GR m
!> %          output dim(pdf) == input dim(m(:))
!> %
!> % NOTES:   based on m2grpdf (m0 & mmax added)
!> %          comparison between m2gfpdf & mdprpdfb: delta circa 10^-15
!> %          int(pdf) == 1 (assumes dm = 1)
!> %          this is a TRUNCATED GR pdf
!> %                                                Andres Mendez       
!> %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
!> """
       
       # determine the probability of each event from the bounded GR PDF
       # This is eq3.6, page 32, of v3.0 of the manual.
>>     beta=log(10)*b
   
       # This is eq3.5, page 32, of v3.0 of the manual.
>>     pdf_tmp = beta*exp(-beta*(m-m0))/(1-exp(-beta*(mmax-m0)))
       #print "pdf_tmp", pdf_tmp
   
       # This is eq3.4, page 32, of v3.0 of the manual.
       # Normalise so the array sums to 1
>>     pdf=pdf_tmp/sum(pdf_tmp)
>>     return pdf
           
   
!> def make_bins(min_magnitude,max_magnitude,num_bins):
       
>>     delta_mag = (max_magnitude-min_magnitude)/num_bins
>>     bins = r_[min_magnitude+delta_mag/2:max_magnitude-delta_mag/2:num_bins*1j]
       #approximate the number of earthquakes in discrete (0.1 unit) bins
>>     return bins
   
   
   
!> def grscale(b,max_magnitude,new_min,min_magnitude):
!>     """
!>     Return Lambda for mag, max_magnitude, and min_magnitude
       
!>     This is eq3.3, page 32, of v3.0 of the manual, without the Amin.
   
!>     The Amin is applied in calc_event_activity.
       
!>     """
       #print b,max_magnitude,new_min,min_magnitude
       # calculate rate of exceedence for magnitude "mag" using Kramer eqn 4.10
>>     beta=log(10)*b
       
>>     numerator=(exp(-beta*(new_min-min_magnitude))
>>                -exp(-beta*(max_magnitude-min_magnitude)))
   
>>     denominator=1-exp(-beta*(max_magnitude-min_magnitude))
>>     return numerator/denominator
