>> """
>>  Title: distances.py
     
>>   Author:  Peter Row, peter.row@ga.gov.au
   
   
>>   Description: Class to calculate distance.  Used in sites.
   
>>   Version: $Revision: 914 $  
>>   ModifiedBy: $Author: dgray $
>>   ModifiedDate: $Date: 2009-04-01 11:11:47 +1100 (Wed, 01 Apr 2009) $
     
>>   Copyright 2007 by Geoscience Australia
>> """
   #FIXME.  This looks like it can be optimised a lot.
   
!> from scipy import array
   
!> from distance_functions import distance_functions
   
!> class Distances(object):
!>     def __init__(self,site_latitude,site_longitude,
!>                  rupture_centroids_lat,
!>                  rupture_centroids_lon,lengths,
!>                  azimuths,widths,dips,depths,projection,
!>                  trace_start_lat=None,trace_start_lon=None,                 
!>                  trace_start_x=None,trace_start_y=None):
           
>>         self.distance_functions=distance_functions
           
>>         self.site_latitude=site_latitude        
>>         self.site_longitude=site_longitude
           
>>         self.rupture_centroid_lat=rupture_centroids_lat
>>         self.rupture_centroid_lon=rupture_centroids_lon        
>>         self.lengths=lengths
>>         self.azimuths=azimuths
>>         self.widths=widths
>>         self.dips=dips
>>         self.depths=depths
           
>>         self.projection=projection
   
           # for backwards testing with matlab
>>         self.trace_start_lat=trace_start_lat
>>         self.trace_start_lon=trace_start_lon
>>         if self.trace_start_lat is not None:
>>             self.trace_start_lat=array(self.trace_start_lat)
>>         if self.trace_start_lon is not None:
>>             self.trace_start_lon=array(self.trace_start_lon)
               
>>         self.trace_start_x=trace_start_x
>>         self.trace_start_y=trace_start_y
>>         if self.trace_start_x is not None:
>>             self.trace_start_x=array(self.trace_start_x)
>>         if self.trace_start_y is not None:
>>             self.trace_start_y=array(self.trace_start_y)
               
   
!>     def __getattr__(self,distance_type):
!>         """
!>         self.Epicentral = self.distance['Epicentral'])
!>         """
!!         if not self.distance_functions.has_key(distance_type):
!!             raise AttributeError
!!         else:
!!             return self.distance(distance_type)
           
!>     def distance(self,distance_type):
>>         distance_function=self.raw_distances
           
           
>>         distance=distance_function(
>>             site_latitude=self.site_latitude,
>>             site_longitude=self.site_longitude,
>>             rupture_centroid_lat=self.rupture_centroid_lat,
>>             rupture_centroid_lon=self.rupture_centroid_lon,
>>             lengths=self.lengths,azimuths=self.azimuths,
>>             widths=self.widths,dips=self.dips,
>>             depths=self.depths,projection=self.projection,
>>             distance_type=distance_type,
>>             trace_start_lat=self.trace_start_lat,
>>             trace_start_lon=self.trace_start_lon,
>>             trace_start_x=self.trace_start_x,
>>             trace_start_y=self.trace_start_y)
           
>>         return distance
       
!>     def raw_distances(self,site_latitude,site_longitude,
!>                       rupture_centroid_lat,
!>                       rupture_centroid_lon,
!>                       lengths,azimuths,widths,dips,
!>                       depths,distance_type,projection,
!>                       trace_start_lat=None,
!>                       trace_start_lon=None,
!>                       trace_start_x=None,
!>                       trace_start_y=None):
!>         """
!>         Calculate the distance from 'locations' to 'rupture_centroid'
!>         A big array, not an array-like object
!>         """
>>         distance_function=self.distance_functions[distance_type]
           
           #if len(site_latitude.shape)==1:
           #    site_latitude=site_latitude[newaxis,:]
           #    site_longitude=site_longitude[newaxis,:]
           ## removing a bomb if a vector (not 2D array) is sent
           
>>         lat,lon=site_latitude,site_longitude
           
>>         lat0,lon0=rupture_centroid_lat,rupture_centroid_lon        
                
>>         raw_distances=distance_function(lat,lon,lat0,lon0,
>>                                         lengths,azimuths,widths,
>>                                         dips,depths,projection,
>>                                         trace_start_lat,
>>                                         trace_start_lon,
>>                                         trace_start_x,
>>                                         trace_start_y)
>>         return raw_distances
   
!>     def __getitem__(self,key):
!!         try:
!!             site,event=key
!!         except:
!!             site,event=key,slice(None)
           
!!         site_latitude=self.site_latitude[site]     
!!         site_longitude=self.site_longitude[site]
!!         rupture_centroid_lat=self.rupture_centroid_lat[event]
!!         rupture_centroid_lon=self.rupture_centroid_lon[event]        
!!         lengths=self.lengths[event]
!!         azimuths=self.azimuths[event]
!!         widths=self.widths[event]
!!         dips=self.dips[event]
!!         depths=self.depths[event]
           
!!         projection=self.projection
           
!!         trace_start_lat=None
!!         trace_start_lon=None
!!         trace_start_x=None
!!         trace_start_y=None
           
           # for backwards testing with matlab
!!         if self.trace_start_lat is not None:
!!             trace_start_lat=self.trace_start_lat[event]
!!             trace_start_lon=self.trace_start_lon[event]
!!         if self.trace_start_x is not None:
!!             trace_start_x=self.trace_start_x[event]
!!             trace_start_y=self.trace_start_y[event]            
           
!!         distance=Distances(site_latitude,site_longitude,
!!                            rupture_centroid_lat,
!!                            rupture_centroid_lon,lengths,
!!                            azimuths,widths,dips,depths,projection,
!!                            trace_start_lat=trace_start_lat,
!!                            trace_start_lon=trace_start_lon,
!!                            trace_start_x=trace_start_x,
!!                            trace_start_y=trace_start_y)
!!         return distance
       
