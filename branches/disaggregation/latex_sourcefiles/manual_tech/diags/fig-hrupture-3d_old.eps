%!PS-Adobe-3.0 EPSF-3.0
%%BoundingBox: 0 0 326 405
%%Creator: CADscript V10.0.17 DLL  Aug 30 2002
%%Title: x:\sims\pub\173-02p\24-2_124.dgn
%%CreationDate: Thu Sep 26 10:54:46 2002
%%DocumentData: Clean7Bit
%%PlateColour: Black
%%EndComments
%%Orientation: Landscape
%%BeginProlog
200 dict begin
/PGR 1 def
/PWIDTH 325.993 def
/PHEIGHT 404.109 def
/PNAME (EPS) def
/MONO 1 def
/CIRC_DEG 1 def
/WDLS 1 def
/CMYKI false def
/CS_IMG_Hex 0 def
% Copy No.: CS10-112-NTJ-MC0203-MC-SL27
% Company : AGSO
%- FILE: CS_EPS.PRO
%- VERSION: 10.0.0
%- DATE: 15 Apr 2002
/blck 0.0 def /yell 0.0 def /mag 0.0 def /cyn 0.0 def /max 0.0 def
/CPB 0 def /CPY 0 def /CPM 0 def /CPC 0 def
/CX 0.0 def /CY 0.0 def /CC (A) def /CG 1.0 def
/llevel systemdict /languagelevel known { languagelevel } { 1 } ifelse def
systemdict /setcmykcolor known true ne { /setcmykcolor { /blck exch def
/yell exch def /mag exch def /cyn exch def 1.0 blck sub /max exch def max cyn sub
max mag sub max yell sub setrgbcolor } bind def } if
systemdict /setoverprint known not { /setoverprint { pop } bind def } if
/m { transform round exch round exch itransform moveto } bind def
/l { transform round exch round exch itransform lineto } bind def
/p {moveto} bind def /v {lineto} bind def /s {stroke} bind def
/f {closepath eofill} bind def /np {newpath} bind def /cp {closepath} bind def
/slw {setlinewidth} bind def /slc {setlinecap} bind def
/slj {setlinejoin} bind def /gs {gsave} bind def /gr {grestore} bind def
/sa {save} bind def  /re {restore} bind def  /st { exch store } bind def
/T true def /F false def /sc {setoverprint setcmykcolor} bind def
/sc2 { /CPO exch def /CPB exch def /CPY exch def /CPM exch def /CPC exch def } bind def
/out { gs MONO 1 eq { CPB sg } { CPC CPM CPY CPB CPO sc } ifelse s gr } bind def
/sg {setgray} bind def /sg2 { /CPB exch def } bind def
/@point { dup mul exch dup mul add 1 exch sub 2 div } bind def
systemdict /sethalftone known llevel 2 ge and { /sLPI { (<<) cvx exec
/HalftoneType 1 /Frequency 5 -1 roll LPI mul round dup 30 lt { pop 30 } if
/Angle ANG /SpotFunction /@point load (>>) cvx exec sethalftone } bind def } {
/sLPI { LPI mul round dup 30 lt { pop 30 } if ANG /@point load setscreen } bind def
} ifelse WDLS 1 eq { /SetStyle { null begin /range exch def /min exch def
/style exch def /width currentlinewidth def /lCap currentlinecap def
/dash true def [ style  {  dash lCap 0 eq {  {  range 0.0 ne
{ dup min sub range div width mul add } if  width add } if } { { range 0.0 ne
{ dup min sub range div width mul add } if  } { width add } ifelse } ifelse
/dash dash not def } forall ] 0 setdash end } dup 0 7 dict put bind def } {
/SetStyle { null begin /range exch def /min exch def /style exch def
style 0 setdash end } dup 0 5 dict put bind def } ifelse
systemdict /rectfill known not { /rectfill {  null begin /h exch def /w exch def
/y exch def newpath dup dup y m w add dup y l y h add l y h add l f end
} dup 0 4 dict put bind def } if systemdict /currentcmykcolor known not
{ /currentcmykcolor { null begin currentrgbcolor /blue exch def /green exch def
/red exch def red green eq green blue eq and { 0.0 0.0 0.0 1.0 red sub  } {
1.0 red sub 1.0 green sub 1.0 blue sub 0.0 } ifelse end
} dup 0 4 dict put bind def } if
%- EOF - CS_GENERAL.PRO
%- FILE: CS_DEVICE.PRO
%- VERSION: 10.0.0
%- DATE: 15 Apr 2002
/calcDevAng { 0.000 0.000 transform  exch  1.00 0.000 transform  4 -1 roll  sub 
3 1 roll exch  sub  atan  } bind def /calcDevResNS { gs  calcDevAng neg rotate
1.0 1 1 transform pop 0 0 transform pop sub abs  div gr  } bind def /calcDevRes {
gs initmatrix calcDevResNS gr } bind def /devres { calcDevRes } def /alr {
dup devres lt { pop devres } if } bind def /checkpath { pathbbox exch  4 1 roll 
sub abs  devres gt  { pop pop }  { sub abs devres le 
{ currentpoint currentpoint newpath devres add p v } if } ifelse } bind def
/getDefaultColRes { 72 devres div LPI div truncate dup mul  dup 200 gt 
{ pop 200 } if dup 40 lt  { pop 40 } if } def
%- EOF - CS_DEVICE.PRO
%- FILE: CS_EPS.PRO
%- VERSION: 10.0.0
%- DATE: 15 Apr 2002
/ssc { null begin  /spotGS exch def /spotName exch def setoverprint
/spotk exch userdict 3 1 roll put  /spoty exch userdict 3 1 roll put 
/spotm exch userdict 3 1 roll put  /spotc exch userdict 3 1 roll put 
[ /Separation spotName /DeviceCMYK { pop userdict /spotc get 
userdict /spotm get  userdict /spoty get  userdict /spotk get  } ] setcolorspace
spotGS setcolor end  } dup 0 5 dict put bind def  /bullseye { /bey exch def
/bex exch def bex 12.75 sub bey m bex 12.75 add bey l bex bey 12.75 sub m
bex bey 12.75 add l s bex bey 11.34 0 360 arc s bex bey 5.67 0 360 arc f 1.0 sg
bex 5.67 sub bey m bex 5.67 add bey l s bex bey 5.67 sub m bex bey 5.67 add l s
0.0 sg } bind def /aligneye { null begin  /bey exch def /bex exch def
bex 11.34 add bey m bex bey 11.34 0 360 arc s 0 9 360  { /val exch def
bex 3.0 val cos mul add bey 3.0 val sin mul add m
bex bey 11.34 val val 4.5 add arc f } for  end } dup 0 4 dict put bind def
%- EOF - CS_SEPARATE.PRO
%- FILE: CS_EPS.PRO
%- VERSION: 10.0.0
%- DATE: 15 Apr 2002
/BeginEPSF { /b4_inc_state save def /dict_count countdictstack def
/op_count count 1 sub def userdict begin /showpage {} def
0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin 10 setmiterlimit [] 0 setdash
/languagelevel where { pop languagelevel 1 ne
{ false setstrokeadjust false setoverprint } if } if
/image systemdict /image get def  } bind def /EndEPSF {
count op_count sub {pop} repeat countdictstack dict_count sub {end} repeat
b4_inc_state restore } bind def
%- EOF - CS_EPS.DAT
%- FILE: CS_FEATURE.PRO
%- VERSION: 10.0.4
%- DATE: 31 Jul 2002
systemdict /makepattern known llevel 2 ge and  { currentdict /TRRND known {
/transSrc { {picstrC 0 0 0 1 7 { pop 1 bitshift rand trPV lt { 1 add } if } for
put picstrC }} bind def /ghsp { 1234 srand
/trPV exch 100 div 2147483647 mul cvi def eoclip pathbbox  2 index sub  exch 
3 index sub  exch  /xS 2 index devres div round cvi def
/yS 1 index devres div round cvi def xS 0 gt yS 0 gt and  { 0.000 imSetup
xS yS true [xS 0 0 yS 0 0] transSrc imagemask } { pop pop pop pop } ifelse
newpath } bind def } { /rashex [ < 0000000000 0000000000 0000000000 0000000000
8C6318C631 > < 8C6318C631 0000000000 0000000000 0000000000 CE739CE739 > <
9CE739CE73 0842108421 0000000000 8421084210 CE739CE739 > < 9CE739CE73 8C6318C631
0000000000 8C6318C631 CE739CE739 > < DEF7BDEF7B 8C6318C631 0000000000 8C6318C631
DEF7BDEF7B > < DEF7BDEF7B CE739CE739 0000000000 DEF7BDEF7B DEF7BDEF7B > <
DEF7BDEF7B DEF7BDEF7B 0000000000 DEF7BDEF7B FFFFFFFFFF > < FFFFFFFFFF DEF7BDEF7B
8C6318C631 DEF7BDEF7B FFFFFFFFFF > < FFFFFFFFFF DEF7BDEF7B CE739CE739 FFFFFFFFFF
FFFFFFFFFF > < FFFFFFFFFF FFFFFFFFFF FFFFFFFFFF FFFFFFFFFF FFFFFFFFFF > ] def
/transSrc { { /iRow iPos xS div cvi def /iCol iPos xS mod 5 mod def
/iRow iRow 5 mod def picstrC 0 rasStr iRow 5 mul iCol add get put picstrC
/iPos iPos 1 add def }} bind def /ghsp { 10.0 div cvi  dup 0 lt { pop 0 } if
dup 9 gt { pop 9 } if rashex exch  get  /rasStr exch def  /iPos 0 def eoclip
pathbbox  2 index sub  exch  3 index sub  exch 
/xS 2 index devres div round cvi def /yS 1 index devres div round cvi def
xS 0 gt yS 0 gt and  { 0.000 imSetup xS yS true [xS 0 0 yS 0 0] transSrc
/xS xS 7 add 8 div cvi def imagemask } { pop pop pop pop } ifelse newpath
} bind def } ifelse } { /ghsp { pop } bind def } ifelse
/patternArea { gs clip newpath PatOX PatOY translate PatRot rotate /PatBXmin
PatBXmin PatXInc div floor PatXInc mul def /PatBYmin PatBYmin PatYInc div floor
PatYInc mul def /PatBXmax PatBXmax PatXInc add def /PatBYmax PatBYmax PatYInc
add def /PatCTM matrix currentmatrix def PatBYmin PatYInc PatBYmax { /Paty exch
def PatBXmin PatXInc PatBXmax { Paty translate PatScale PatScale scale newpath
PatName PatCTM setmatrix } for } for gr newpath } bind def
systemdict /rectfill known not { /rectfill {  null begin /h exch def /w exch def
/y exch def newpath dup dup y m w add dup y l y h add l y h add l f end
} dup 0 4 dict put bind def } if /gradColSetup { MONO 1 eq {
/startK currentgray def /diffK CPB startK sub def /colfunc  {
diffK mul startK add sg } bind def } { currentcmykcolor /startK exch def
/startY exch def /startM exch def /startC exch def /startC startC startK add def
/startM startM startK add def /startY startY startK add def
/diffC CPC CPB add startC sub def /diffM CPM CPB add startM sub def
/diffY CPY CPB add startY sub def /colfunc  { dup diffC mul startC add
exch dup diffM mul startM add exch diffY mul startY add 0.0 setcmykcolor }
bind def } ifelse } bind def /CnvCMYKtoGS { 4 1 roll  0.11 mul 4 1 roll  0.59 mul
4 1 roll  0.30 mul add add add 1.0 exch sub dup 0.0 lt { pop 0.0 } if } bind def
/gradCol2Setup { /colfunc  { /pos 1 def { dup colRange pos get  0 get  le { exit
} if /pos pos 1 add def } loop colRange pos 1 sub get 
dup 0 get /startPos exch def  dup 1 get /startC exch def 
dup 2 get /startM exch def  dup 3 get /startY exch def  4 get /startK exch def 
colRange pos get  dup 0 get /endPos exch def  dup 1 get /endC exch def 
dup 2 get /endM exch def  dup 3 get /endY exch def  4 get /endK exch def 
/diffPos endPos startPos sub def startPos sub diffPos div
/diffC endC startC sub def /diffM endM startM sub def /diffY endY startY sub def
/diffK endK startK sub def dup diffC mul startC add exch dup diffM mul startM add
exch dup diffY mul startY add exch diffK mul startK add 1 MONO eq { CnvCMYKtoGS
setgray } { setcmykcolor } ifelse } bind def } bind def /radFillArea { null begin
gs /cY exch def /cX exch def /nGrads exch def /maxRad exch def eoclip newpath
nGrads 2 le { /nGrads getDefaultColRes def } if gradColSetup nGrads -1 1 {
nGrads div dup colfunc cX cY 3 -1 roll maxRad mul 0 360 arc f } for gr newpath
end } dup 0 20 dict put bind def /radFillArea2 { null begin gs
/cY exch def /cX exch def /nGrads exch def /maxRad exch def eoclip newpath
nGrads 2 le { /nGrads getDefaultColRes def } if gradCol2Setup nGrads -1 1 {
nGrads div dup colfunc cX cY 3 -1 roll maxRad mul 0 360 arc f } for gr newpath
end } dup 0 20 dict put bind def /gradFillArea { null begin gs rotate
/nGrads exch def /yMax exch def /xMax exch def /yMin exch def /xMin exch def
eoclip newpath /yDiff yMax yMin sub def /xDiff xMax xMin sub def nGrads 2 le {
/nGrads getDefaultColRes def } if /Xinc xDiff nGrads div def gradColSetup
0 1 nGrads 1 sub {  nGrads div  dup colfunc  xDiff mul xMin add
yMin Xinc yDiff rectfill } for gr newpath end } dup 0 25 dict put bind def
/gradFillArea2 { null begin gs rotate /nGrads exch def /yMax exch def
/xMax exch def /yMin exch def /xMin exch def eoclip newpath
/yDiff yMax yMin sub def /xDiff xMax xMin sub def nGrads 2 le {
/nGrads getDefaultColRes def } if /Xinc xDiff nGrads div def gradCol2Setup
0 1 nGrads 1 sub {  nGrads div  dup colfunc  xDiff mul xMin add
yMin Xinc yDiff rectfill } for gr newpath end } dup 0 25 dict put bind def /halo
{ null begin /haloSize exch 2 mul def /nGrads exch def gs nGrads 2 le {
/nGrads getDefaultColRes def } if gradColSetup 1 setlinejoin nGrads -1 1 {
nGrads div dup colfunc gs haloSize mul setlinewidth s gr } for gr newpath end
} dup 0 20 dict put bind def /halo2 { null begin /haloSize exch 2 mul def
/nGrads exch def gs nGrads 2 le { /nGrads getDefaultColRes def } if gradCol2Setup
1 setlinejoin nGrads -1 1 { nGrads div dup colfunc gs haloSize mul setlinewidth s
gr } for gr newpath end } dup 0 24 dict put bind def
%- EOF - CS_FEATURE.PRO
%- FILE: CS_IMAGE.PRO
%- VERSION: 10.0.4
%- DATE: 15 Apr 2002
/imSetup { 4 index  4 index  translate  rotate  scale  pop pop } bind def
/imSetupT { 4 index  4 index  translate  rotate  /tExp false def dup 5.0 lt {
100 mul /tExp true def } if scale  pop pop } bind def /picstrC 1 string def
/picstrC2 2 string def /picstrC3 3 string def /tstr3 3 string def
/tcol3 3 string def systemdict /colorimage known { /picstrCc 1 string def
/picstrCm 1 string def /picstrCy 1 string def /picstrCk 1 string def
/picstrC4 4 string def /picstrC6 6 string def /picstrCc2 2 string def
/picstrCm2 2 string def /picstrCy2 2 string def /picstrCk2 2 string def
/readString { readstring pop } bind def /readChar { read pop } bind def
/readOptional { picstrC readstring pop } bind def /buildFilter {
/compType exch def /FP currentfile CS_IMG_Hex 1 eq { /ASCIIHexDecode filter } {
/ASCII85Decode filter } ifelse compType 1 eq { /RunLengthDecode filter } if
compType 2 eq { (<<) cvx exec /Columns xsize /Rows ysize /K 0 /BlackIs1 true
(>>) cvx exec /CCITTFaxDecode filter } if compType 3 eq { (<<) cvx exec
/Columns xsize /Rows ysize /K 1 /BlackIs1 true (>>) cvx exec
/CCITTFaxDecode filter } if compType 4 eq { (<<) cvx exec /Columns xsize
/Rows ysize /K -1 /BlackIs1 true (>>) cvx exec /CCITTFaxDecode filter } if
compType 6 eq { (<<) cvx exec (>>) cvx exec /DCTDecode filter } if compType 7 eq
{ /FlateDecode filter } if def } bind def CMYKI { /image$ /image load def /image
{ dup 3 eq 2 index not and { pop pop /datasrc exch def {
datasrc dup type /stringtype eq { dup length 6 eq { picstrC6 copy pop
picstrCc2 0 picstrC6 0 get 255 exch sub put
picstrCm2 0 picstrC6 1 get 255 exch sub put
picstrCy2 0 picstrC6 2 get 255 exch sub put picstrCk2 0 0 put
picstrCc2 1 picstrC6 3 get 255 exch sub put
picstrCm2 1 picstrC6 4 get 255 exch sub put
picstrCy2 1 picstrC6 5 get 255 exch sub put picstrCk2 1 0 put } {
picstrC3 copy pop picstrCc 0 picstrC3 0 get 255 exch sub put
picstrCm 0 picstrC3 1 get 255 exch sub put
picstrCy 0 picstrC3 2 get 255 exch sub put picstrCk 0 0 put } ifelse } {
picstrC3 readString pop picstrCc 0 picstrC3 0 get 255 exch sub put
picstrCm 0 picstrC3 1 get 255 exch sub put
picstrCy 0 picstrC3 2 get 255 exch sub put picstrCk 0 0 put } ifelse picstrCc }
{ picstrCm } { picstrCy } { picstrCk } true 4 } if dup 3 eq 2 index not and { pop
pop /datasrc exch def { datasrc /picstrC4 exch def picstrCc 0 picstrC4 0 get put
picstrCm 0 picstrC4 1 get put picstrCy 0 picstrC4 2 get put
picstrCk 0 picstrC4 3 get put picstrCc } { picstrCm } { picstrCy } { picstrCk }
true 4 } if image$ } bind def } if /imageLoad256 { buildFilter {
colourTable FP readChar 3 mul 3 getinterval } false 3
/imageCommand {colorimage} bind def } bind def /imageLoadMono { buildFilter
picstrC4 0 0 put picstrC4 1 0 put picstrC4 2 0 put { FP picstrC readString 
0 get 255 exch sub picstrC4 3  3 -1 roll  put picstrC4 } false 4
/imageCommand {colorimage} bind def } def /imageLoad16 { /FP dataFilter def {
FP readChar dup 16 idiv colourTable exch 3 mul 3 getinterval exch 16 mod
colourTable exch 3 mul 3 getinterval picstrC6 3 3 -1 roll putinterval
picstrC6 0 3 -1 roll putinterval picstrC6 } } def /imageLoadRGB { buildFilter
{ FP picstrC3 readString } false 3 /imageCommand {colorimage} bind def } bind def
/imageLoadCMYK { buildFilter { FP picstrC4 readString } false 4
/imageCommand {colorimage} bind def } bind def /loadtintImage {
/FP dataFilter def currentrgbcolor /blue exch 255 mul def /green exch 255 mul def
/red exch 255 mul def { FP readChar 255 div dup blue mul cvi
picstrC3 2 3 -1 roll put dup green mul cvi picstrC3 1 3 -1 roll put red mul cvi
picstrC3 0 3 -1 roll put picstrC3 } } def /tintImage { false 3 colorimage }
bind def /imageLoadRLE1BitImage { /xsize 5 index def /ysize 4 index def
buildFilter { FP readOptional } /imageCommand {image} bind def } bind def
/tcimage256 { null begin buildFilter /tcol3 exch def /height exch def
/width exch def /pw 1 width div def /ph 1 height div tExp { 100 div } if def
/tdr calcDevResNS width div def  /rw pw tdr le { tdr } { pw } ifelse def ph slw
0 slc 0 1 height 1 sub { /yh exch 0.5 add ph mul neg def 0 1 width 1 sub {
FP readChar dup tcol3 ne { colourTable exch 3 mul 3 getinterval
dup 0 get 255 div exch dup 1 get 255 div exch 2 get 255 div setrgbcolor
0.5 add pw mul yh moveto rw 0 rlineto s } { pop pop } ifelse } for } for end
} dup 0 20 dict put bind def /tcimageRGB { null begin buildFilter /tcolr exch def
/tcolg exch def /tcolb exch def /height exch def /width exch def
/pw 1 width div def /ph 1 height div tExp { 100 div } if def
/tdr calcDevResNS width div def  /rw pw tdr le { tdr } { pw } ifelse def
tcol3 0 tcolr put tcol3 1 tcolg put tcol3 2 tcolb put ph slw 0 slc
0 1 height 1 sub { /yh exch 0.5 add ph mul neg def 0 1 width 1 sub {
FP tstr3 readString (\0\0\0) ne { tstr3 0 get 255 div tstr3 1 get 255 div
tstr3 2 get 255 div setrgbcolor 0.5 add pw mul yh moveto rw 0 rlineto s } { pop }
ifelse } for } for end } dup 0 20 dict put bind def /timage { null begin
buildFilter /height exch def /width exch def /pw 1 width div def /ph 1 height div
tExp { 100 div } if def /tdr calcDevResNS width div def 
/rw pw tdr le { tdr } { pw } ifelse def ph slw 0 slc 0 1 height 1 sub {
/yh exch 0.5 add ph mul neg def 0 1 width 1 sub { FP readChar dup 0 ne { 255 div
sg 0.5 add pw mul yh moveto rw 0 rlineto s } { pop pop } ifelse } for } for end
} dup 0 20 dict put bind def /tintCMYK { 4 1 roll  1.0 exch sub 
4 index mul 1.0 exch sub cvi  4 1 roll  1.0 exch sub 
4 index mul 1.0 exch sub cvi  4 1 roll  1.0 exch sub 
4 index mul 1.0 exch sub cvi  4 1 roll  5 -1 roll pop  } bind def /tTintImage {
null begin buildFilter /height exch def /width exch def /pw 1 width div def
/ph 1 height div tExp { 100 div } if def /tdr calcDevResNS width div def 
/rw pw tdr le { tdr } { pw } ifelse def ph slw 0 slc 0 1 height 1 sub {
/yh exch 0.5 add ph mul neg def 0 1 width 1 sub { FP readChar dup 0 ne { 255 div
currentcmykcolor tintCMYK setcmykcolor 0.5 add pw mul yh moveto rw 0 rlineto s }
{ pop pop } ifelse } for } for end } dup 0 20 dict put bind def /tcimage16 {
null begin buildFilter /tcol3 exch def /height exch def /width exch def
/pw 1 width div def /ph 1 height div tExp { 100 div } if def
/tdr calcDevResNS width div def  /rw pw tdr le { tdr } { pw } ifelse def
/p2 0 def ph slw 0 slc 0 1 height 1 sub { /yh exch 0.5 add ph mul neg def
/first true def 0 1 width 1 sub { first { FP readChar dup 16 idiv exch
16 mod /p2 exch def } { p2 } ifelse /first first not def dup tcol3 ne {
colourTable exch 3 mul 3 getinterval dup 0 get 255 div exch
dup 1 get 255 div exch 2 get 255 div setrgbcolor 0.5 add pw mul yh moveto
rw 0 rlineto s } { pop pop } ifelse } for } for end } dup 0 20 dict put bind def
} {  /dataFilter { { currentfile picstrC readhexstring pop } } def /CnvRGBtoGS {
dup 0 get 0.30 mul exch dup 1 get 0.59 mul exch 2 get 0.11 mul add add cvi
} bind def /outChar { /num exch def picstrC 0 num put picstrC } bind def
/imageLoad256 { { colourTable currentfile picstrC readhexstring
pop 0 get 3 mul 3 getinterval CnvRGBtoGS outChar } } def /imageLoadMono { {
currentfile picstrC readhexstring pop } } def /imageLoad16 { {
currentfile picstrC readhexstring pop 0 get dup 16 idiv colourTable
exch 3 mul 3 getinterval CnvRGBtoGS exch 16 mod colourTable
exch 3 mul 3 getinterval CnvRGBtoGS picstrC2 1 3 -1 roll put
picstrC2 0 3 -1 roll put picstrC2 } } def /imageLoadRGB { {
currentfile picstrC3 readhexstring pop CnvRGBtoGS outChar } } def /imageCommand 
{image} bind def /loadtintImage { { currentfile picstrC readhexstring pop } } def
/tintImage { image } bind def /imageLoadRLE1BitImage { {
currentfile picstrC readhexstring pop } } def /tcimage256 { null begin pop
/tcol3 exch def /height exch def /width exch def /pw 1 width div def
/ph 1 height div tExp { 100 div } if def /tdr calcDevResNS width div def 
/rw pw tdr le { tdr } { pw } ifelse def ph slw 0 slc 0 1 height 1 sub {
/yh exch 0.5 add ph mul neg def 0 1 width 1 sub {
currentfile picstrC readhexstring pop 0 get dup tcol3 ne { colourTable exch
3 mul 3 getinterval dup 0 get 255 div exch dup 1 get 255 div exch 2 get 255 div
setrgbcolor 0.5 add pw mul yh moveto rw 0 rlineto s } { pop pop } ifelse } for }
for end } dup 0 20 dict put bind def /tcimageRGB { null begin pop /tcolr exch def
/tcolg exch def /tcolb exch def /height exch def /width exch def
/pw 1 width div def /ph 1 height div tExp { 100 div } if def
/tdr calcDevResNS width div def  /rw pw tdr le { tdr } { pw } ifelse def
tcol3 0 tcolr put tcol3 1 tcolg put tcol3 2 tcolb put ph slw 0 slc
0 1 height 1 sub { /yh exch 0.5 add ph mul neg def 0 1 width 1 sub {
currentfile tstr3 readhexstring pop dup (\0\0\0) ne { dup 0 get 255 div exch
dup 1 get 255 div exch 2 get 255 div setrgbcolor 0.5 add pw mul yh moveto
rw 0 rlineto s } { pop pop } ifelse } for } for end } dup 0 20 dict put bind def
/timage { null begin pop /height exch def /width exch def /pw 1 width div def
/ph 1 height div tExp { 100 div } if def /tdr calcDevResNS width div def 
/rw pw tdr le { tdr } { pw } ifelse def ph slw 0 slc 0 1 height 1 sub {
/yh exch 0.5 add ph mul neg def 0 1 width 1 sub {
currentfile picstrC readhexstring pop 0 get dup 0 ne { 255 div sg
0.5 add pw mul yh moveto rw 0 rlineto s } { pop pop } ifelse } for } for end
} dup 0 20 dict put bind def /tintCMYK { 4 1 roll  1.0 exch sub 
4 index mul 1.0 exch sub cvi  4 1 roll  1.0 exch sub 
4 index mul 1.0 exch sub cvi  4 1 roll  1.0 exch sub 
4 index mul 1.0 exch sub cvi  4 1 roll  5 -1 roll pop  } bind def /tTintImage {
null begin pop /height exch def /width exch def /pw 1 width div def
/ph 1 height div tExp { 100 div } if def /tdr calcDevResNS width div def 
/rw pw tdr le { tdr } { pw } ifelse def ph slw 0 slc 0 1 height 1 sub {
/yh exch 0.5 add ph mul neg def 0 1 width 1 sub {
currentfile picstrC readhexstring pop 0 get dup 0 ne { 255 div currentcmykcolor
tintCMYK setcmykcolor 0.5 add pw mul yh moveto rw 0 rlineto s } { pop pop }
ifelse } for } for end } dup 0 20 dict put bind def /tcimage16 { null begin pop
/tcol3 exch def /height exch def /width exch def /pw 1 width div def
/ph 1 height div tExp { 100 div } if def /tdr calcDevResNS width div def 
/rw pw tdr le { tdr } { pw } ifelse def /p2 0 def ph slw 0 slc 0 1 height 1 sub {
/yh exch 0.5 add ph mul neg def /first true def 0 1 width 1 sub { first {
currentfile picstrC readhexstring pop 0 get dup 16 idiv exch 16 mod /p2 exch def
} { p2 } ifelse /first first not def dup tcol3 ne { colourTable exch
3 mul 3 getinterval dup 0 get 255 div exch dup 1 get 255 div exch 2 get 255 div
setrgbcolor 0.5 add pw mul yh moveto rw 0 rlineto s } { pop pop } ifelse } for }
for end } dup 0 20 dict put bind def } ifelse
%- EOF - CS_IMAGE.PRO
%- FILE: CS_TEXT.PRO
%- VERSION: 10.0.1
%- DATE: 8 Aug 2002
/PosAccent { pop pop pop gs newpath
0 0 m accentchar true charpath flattenpath pathbbox pop pop /ally exch def pop
/awid { accentchar stringwidth pop } def newpath 0 0 m lChar
true charpath flattenpath pathbbox /nury exch def pop pop pop gr } bind def
/AccentChar { /slant exch def /vertWidth exch def /vertText exch def
/charSpc exch def /accentchar exch def
(\221\222\264\223\224\225\257\226\227\230\250\232\235\237) accentchar search {
PosAccent vertText 0.0 eq { lChar stringwidth pop  dup  awid add  2 div 
charSpc add  neg  exch  cta mul .45 mul  nury 1.1 mul  exch  sub  ally sub  } {
0  vertWidth cta mul .45 mul  nury 1.1 mul  exch  sub  ally sub 
vertText charSpc add add  } ifelse rmoveto 0 0 false }  { pop
(\233\270\236) accentchar search { vertText 0.0 eq { PosAccent
lChar stringwidth pop  awid add  2 div  charSpc add  neg 0  } {
0 vertText charSpc add } ifelse rmoveto 0 0 false } { pop true
/lChar accentchar def } ifelse } ifelse } bind def /CSText { null begin { /func
{  currentpoint 3 -1 roll dup stringwidth 3 -1 roll  true charpath s  exch 
4 -1 roll  add  3 1 roll  add  moveto } bind def } { /func {show} bind def }
ifelse ProcText end } dup 0 30 dict put bind def /GFText { null begin
/typeFill exch def /slant exch def /vertWidth exch def /vertText exch def
/charSpc exch def /special exch def /angle exch def /nGrads exch def
/str exch def gs currentpoint /ury exch def /urx exch def currentpoint
/lly exch def /llx exch def /func {AddCharBBox} bind def
str special charSpc vertText vertWidth slant ProcText newpath llx lly moveto
llx ury lineto urx ury lineto urx lly lineto closepath angle rotate pathbbox gr
/ury exch def /urx exch def /lly exch def /llx exch def typeFill 1 eq { /func {
true charpath llx lly urx ury nGrads angle gradFillArea } bind def } { /func {
true charpath llx lly urx ury nGrads angle gradFillArea2 } bind def } ifelse
str special charSpc vertText vertWidth slant ProcText end
} dup 0 50 dict put bind def /AddCharBBox { gs true charpath pathbbox dup ury gt
{ /ury exch def } { pop } ifelse dup urx gt { /urx exch def } { pop } ifelse
dup lly lt { /lly exch def } { pop } ifelse dup llx lt { /llx exch def } { pop }
ifelse gr } bind def /fractComps
[ (1) (2) (1) (4) (3) (4) (1) (8) (3) (8) (5) (8) (7) (8) (1) (16) (3) (16)
(5) (16) (7) (16) (9) (16) (11) (16) (13) (16) (15) (16) (1) (32) (3) (32) (5) (32)
(7) (32) (9) (32) (11) (32) (13) (32) (15) (32) (17) (32) (19) (32) (21) (32) (23) (32)
(25) (32) (27) (32) (29) (32) (31) (32) (1) (64) (3) (64) (5) (64) (7) (64) (9) (64)
(11) (64) (13) (64) (15) (64) (17) (64) (19) (64) (21) (64) (23) (64) (25) (64)
(27) (64) (29) (64) (31) (64) (33) (64) (35) (64) (37) (64) (39) (64) (41) (64)
(43) (64) (45) (64) (47) (64) (49) (64) (51) (64) (53) (64) (55) (64) (57) (64)
(59) (64) (61) (64) (63) (64) ] def /fstrwidth { /den exch def /num exch def
/regfont currentfont def /fracfont currentfont [ .65 0 0 .6 0 0 ] makefont def
gsave newpath 0 0 moveto (1) true charpath flattenpath pathbbox
/height exch def pop pop pop grestore gsave fracfont setfont num stringwidth
/yCurrent exch def /xCurrent exch def den stringwidth
/yCurrent exch yCurrent add def /xCurrent exch xCurrent add def regfont setfont
(\213) stringwidth /yCurrent exch yCurrent add def
/xCurrent exch xCurrent add def grestore xCurrent yCurrent } bind def /fshow {
/den exch def /num exch def /regfont currentfont def
/fracfont currentfont [ .65 0 0 .6 0 0 ] makefont def gsave newpath 0 0 moveto
(1) true charpath flattenpath pathbbox /height exch def pop pop pop grestore
0 .4 height mul rmoveto fracfont setfont num func 0 .4 height mul neg rmoveto
regfont setfont (\213) func fracfont setfont den func regfont setfont } bind def
/fstrwidthc { /chr exch def chr 0 get  dup dup  129 ge exch 191 le and  {
129 sub  2 mul dup  fractComps exch get  exch  1 add  fractComps exch get 
fstrwidth  } { pop  chr stringwidth  } ifelse } bind def /fshowchar {
/chr exch def chr 0 get  dup dup  129 ge exch 191 le and  {  129 sub  2 mul dup 
fractComps exch get  exch  1 add  fractComps exch get  fshow  }  {  pop 
chr func  }  ifelse } bind def /setupCP { currentpoint /CY exch def  /CX exch def
vertText 0.0 ne { /CY CY vertText sub def CX CY m } if } bind def /ProcText  {
/slant exch def /vertWidth exch def /vertText exch def /charSpc exch def
/spec exch def /str exch def /len str length def setupCP spec 1 eq {
/cta 0 0 transform exch 1 0 transform 4 1 roll sub 3 1 roll exch sub exch  dup
0 eq  { pop pop 0.0 } { div abs } ifelse dup 1 gt { 1 exch div } if def  } if
/lChar str 0 1 getinterval def vertText 0.0 ne { vertWidth spec 2 eq
{ lChar fstrwidthc } { lChar stringwidth } ifelse  pop vertText slant mul add
sub 2.0 div  0 rmoveto } if spec 2 eq { lChar fshowchar } { lChar func } ifelse 
vertText 0.0 eq { spec 2 eq { lChar fstrwidthc } { lChar stringwidth } ifelse 
CY add /CY exch def CX add charSpc add /CX exch def } {
CY vertText sub charSpc sub /CY exch def } ifelse 1 1 len 1 sub {
str exch 1 getinterval /currentChar exch def vertText 0.0 ne { vertWidth
spec 2 eq { currentChar fstrwidthc } { currentChar stringwidth } ifelse  pop
vertText slant mul add sub  2.0 div  CX add } { CX } ifelse CY m spec 1 eq
{ currentChar charSpc vertText vertWidth slant AccentChar } { true } ifelse  { 
vertText 0.0 eq { spec 2 eq { currentChar fstrwidthc }
{ currentChar stringwidth } ifelse  exch charSpc add } {
vertText charSpc add neg 0.0 } ifelse } if spec 2 eq { currentChar fshowchar }
{ currentChar func } ifelse  CX add /CX exch def CY add /CY exch def } for
} bind def /ISOcode { dup findfont begin currentdict dup length dict begin
{ 1 index /FID ne {def} {pop pop} ifelse } forall /FontName exch def
Encoding StandardEncoding eq { /Encoding STDenc def } if currentdict dup end end
/FontName get exch definefont pop } bind def
/STDenc StandardEncoding 256 array copy def 0 [ 20 /paragraph /section
CIRC_DEG 1 eq { 39 /quotesingle 94 /degree } if 139 /fraction 140 /emdash /endash
144 /dotlessi /grave /acute /circumflex /tilde /macron /breve /dotaccent
/dieresis 154 /ring /cedilla 157 /hungarumlaut /ogonek /caron
160 /space /exclamdown /cent /sterling /currency /yen /brokenbar /section
168 /dieresis /copyright /ordfeminine /guillemotleft
/logicalnot /hyphen /registered /macron
176 /degree /plusminus /twosuperior /threesuperior /acute /mu /paragraph /periodcentered
184 /cedilla /onesuperior/ordmasculine /guillemotright /onequarter /onehalf
/threequarters /questiondown
192 /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
200 /Egrave /Eacute /Ecircumflex /Edieresis/Igrave /Iacute /Icircumflex /Idieresis
208 /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /OE
216 /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /germandbls
224 /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
232 /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
240 /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /oe
248 /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /ydieresis ]
{ dup type /nametype eq { STDenc 2 index 2 index put pop 1 add }{
exch pop } ifelse } forall pop
%- EOF - CS_TEXT.PRO
%%EndProlog
%- FILE: CS_SETUP.PRO
%- VERSION: 10.0.0
%- DATE: 15 Apr 2002
%%BeginSetup
PNAME (EPS) ne { statusdict /setpageparams known
{ statusdict begin PWIDTH cvi PHEIGHT cvi 0 1 setpageparams end } if } if
PNAME (EPS) ne { llevel 1 eq {
PNAME (A4) eq { statusdict /a4tray known { statusdict /a4tray get exec } if } if
PNAME (A3) eq { statusdict /a3tray known { statusdict /a3tray get exec } if } if
PNAME (LETTER) eq { statusdict /lettertray known { statusdict /lettertray get exec } if } if
PNAME (LEGAL) eq { statusdict /legaltray known { statusdict /legaltray get exec } if } if
PNAME (B5) eq { statusdict /b5tray known { statusdict /b5tray get exec } if } if
PNAME (B4) eq { statusdict /b4tray known { statusdict /b4tray get exec } if } if
PNAME (11X17) eq { statusdict /11x17tray known { statusdict /11x17tray get exec } if } if
currentdict /NCOPIES known  { /#copies NCOPIES def } if } { (<<) cvx exec
/PageSize [ PWIDTH PHEIGHT ] /ImagingBBox null (>>) cvx exec setpagedevice
currentdict /NCOPIES known  { (<<) cvx exec /NumCopies NCOPIES 
(>>) cvx exec setpagedevice } if currentdict /RES known { (<<) cvx exec
/HWResolution [ RES RES ] (>>) cvx exec setpagedevice } if PGR 1 eq {
(<<) cvx exec /Orientation 1 (>>) cvx exec setpagedevice } if
currentdict /PTRAY known { (<<) cvx exec /MediaPosition PTRAY /MediaType null
/TraySwitch false /ManualFeed false (>>) cvx exec setpagedevice } if
currentdict /EMULSIONDN known { (<<) cvx exec /MirrorPrint true
(>>) cvx exec setpagedevice } if } ifelse } if
currentscreen dup type /dicttype eq { dup /HalftoneType get 1 eq {
dup /Frequency get /LPI exch def /Angle get /ANG exch def pop pop } { pop pop pop
currentpagedevice /HWResolution get 0 get 7 mul 210 div 50 add /LPI exch def
/ANG 45 def } ifelse } { pop /ANG exch def /LPI exch def } ifelse
%%EndSetup
%- EOF - CS_SETUP.PRO

0.00 0.00 translate
0.00 0.00 translate
163.00 202.05 translate
0.0000 rotate
-163.00 -202.05 translate
0.0000 rotate
/b {
newpath
325.99 0.00 moveto
0.00 0.00 lineto
0.00 404.11 lineto
325.99 404.11 lineto
closepath
} bind def
 b 
clip newpath
0 slj
2.0000 setmiterlimit
/US_STYLE0 { [ ] 0.00 0.00 } bind def
/US_STYLE1 { [ 0.51 2.98 ] 0.51 0.00 } bind def
/US_STYLE2 { [ 4.96 2.98 ] 4.96 0.00 } bind def
/US_STYLE3 { [ 11.91 3.97 ] 11.91 0.00 } bind def
/US_STYLE4 { [ 7.94 2.98 1.98 2.98 ] 1.98 5.95 } bind def
/US_STYLE5 { [ 3.97 3.97 ] 3.97 0.00 } bind def
/US_STYLE6 { [ 5.95 1.98 1.98 1.98 1.98 1.98 ] 1.98 3.97 } bind def
/US_STYLE7 { [ 7.94 1.98 3.97 1.98 ] 3.97 3.97 } bind def
0.51 slw
2 slc
US_STYLE2 SetStyle
0.000 sg
84.12 140.88 m
155.72 182.22 l
s
155.72 182.22 m
155.72 352.95 l
s
323.18 85.53 m
155.72 182.22 l
s
0.900 sg
64.44 190.87 m
206.03 272.61 l
272.87 165.87 l
131.28 84.13 l
64.44 190.87 l
cp
f
0.14 slw
US_STYLE0 SetStyle
0.51 slw
US_STYLE2 SetStyle
0.000 sg
181.59 3.79 m
323.18 85.53 l
s
181.59 3.79 m
14.13 100.47 l
s
323.18 85.53 m
323.18 256.27 l
s
14.13 100.47 m
14.13 271.21 l
s
323.18 256.27 m
155.72 352.95 l
s
14.13 271.21 m
155.72 352.95 l
s
US_STYLE1 SetStyle
0.000 sg
155.72 352.95 m
323.18 85.53 l
s
14.13 271.21 m
181.59 3.79 l
s
0.500 sg
168.66 178.37 3.41 alr 0.00 360.00 arc
cp
f
US_STYLE0 SetStyle
US_STYLE2 SetStyle
0.000 sg
181.59 174.52 m
14.13 271.21 l
s
181.59 174.52 m
323.18 256.27 l
s
181.59 3.79 m
181.59 174.52 l
s
US_STYLE0 SetStyle
0.000 sg
14.13 271.21 m
217.05 154.05 l
s
14.13 271.21 m
14.13 79.15 l
s
14.13 271.21 m
179.50 366.69 l
s
10.32 80.07 m
17.71 84.38 l
14.18 74.06 l
10.32 80.07 l
cp
f
175.99 360.08 m
175.99 369.24 l
181.43 367.80 l
175.99 360.08 l
cp
f
209.68 163.00 m
209.68 153.62 l
217.05 154.05 l
209.68 163.00 l
cp
f
/Palatino-Roman findfont [10.20 0 5.89 10.20 0 0] makefont setfont
gs 183.18 365.88 m
30.00 rotate
(x) show
gr
gs 11.80 63.84 m
30.00 rotate
(z) show
gr
/Palatino-Roman findfont [10.20 0 -5.89 10.20 0 0] makefont setfont
gs 218.98 151.70 m
330.00 rotate
(y) show
gr
/Helvetica-Bold findfont [9.85 0 -0.52 9.85 0 0] makefont setfont
gs 69.37 287.67 m
30.00 rotate
(Fault Trace) show
gr
14.13 273.78 m
14.13 292.08 l
s
/Helvetica findfont [8.16 0 4.71 8.16 0 0] makefont setfont
gs -6.74 296.58 m
30.00 rotate
(    Start of) show
gr
gs 6.09 292.40 m
30.00 rotate
(trace) show
gr
155.72 355.53 m
155.72 373.83 l
s
gs 131.87 376.00 m
30.00 rotate
(      End of) show
gr
gs 145.52 372.29 m
30.00 rotate
(trace) show
gr
/Helvetica findfont 9.71 scalefont setfont
gs 66.19 153.95 m
302.06 rotate
(Rupture width) show
gr
/Helvetica findfont [9.71 0 -0.51 9.71 0 0] makefont setfont
gs 188.75 92.11 m
30.00 rotate
(Rupture length) show
gr
0.57 slw
US_STYLE0 SetStyle
168.66 178.37 m
168.80 160.81 l
s
0.51 slw
US_STYLE0 SetStyle
54.20 178.96 m
67.84 157.18 l
s
102.10 102.46 m
116.31 79.77 l
s
51.70 175.19 m
51.44 183.36 l
58.79 179.32 l
51.70 175.19 l
cp
f
118.28 76.62 m
118.54 84.79 l
111.19 80.75 l
118.28 76.62 l
cp
f
143.76 69.67 m
185.96 94.03 l
s
243.88 127.47 m
281.10 148.97 l
s
149.34 67.55 m
144.43 75.39 l
141.24 68.22 l
149.34 67.55 l
cp
f
279.75 142.84 m
274.83 150.68 l
282.83 149.96 l
279.75 142.84 l
cp
f
US_STYLE2 SetStyle
0.000 sg
14.13 100.47 m
74.70 135.44 l
s
/Helvetica findfont 5.05 scalefont setfont
0.000 sg
gs 189.48 3.54 m
(24-2/124) show
gr
/Helvetica findfont [8.16 0 -4.71 8.16 0 0] makefont setfont
0.000 sg
gs 30.99 249.34 m
330.00 rotate
(Dip) show
gr
US_STYLE0 SetStyle
39.64 230.47 m
42.78 233.15 l
45.45 236.45 l
47.60 240.33 l
49.20 244.73 l
50.21 249.56 l
50.31 250.32 v
s
50.31 250.32 m
52.90 242.38 l
s
50.31 250.32 m
46.39 247.22 l
s
39.64 230.47 m
45.47 229.03 l
s
39.64 230.47 m
40.06 236.31 l
s
/Helvetica findfont [9.71 0 -0.34 9.71 0 0] makefont setfont
gs 163.10 219.34 m
30.00 rotate
(Rupture) show
gr
gs 173.42 212.40 m
30.00 rotate
(plane) show
gr
/Palatino-Roman findfont [10.20 0 -0.36 10.20 0 0] makefont setfont
gs 122.90 129.44 m
30.00 rotate
(\(r  , r  , r  \)) show
gr
/Palatino-Roman findfont [8.16 0 -0.29 8.16 0 0] makefont setfont
gs 130.72 130.12 m
30.00 rotate
(x     y     z) show
gr
gs 130.72 130.12 m
30.00 rotate
(x     y     z) show
gr
1.98 slw
US_STYLE0 SetStyle
0.000 sg
14.13 271.21 m
155.72 352.95 l
s
/Helvetica findfont [9.71 0 5.61 9.71 0 0] makefont setfont
0.000 sg
gs 253.01 277.96 m
330.00 rotate
(  Ground) show
gr
gs 249.97 266.82 m
330.00 rotate
(surface) show
gr
/Helvetica findfont [9.71 0 -0.34 9.71 0 0] makefont setfont
gs 103.52 130.76 m
30.00 rotate
(Rupture centroid) show
gr
showpage
end
%%EOF
