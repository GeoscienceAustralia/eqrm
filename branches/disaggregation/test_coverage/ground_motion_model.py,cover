!> from scipy import asarray,alltrue,newaxis,ndarray,isfinite
!> from attenuation_models import attenuation_models as attenuation_dict
   
   ############################################################################
!> class Ground_motion_model(object):
!>     def __init__(self,attenuation_models,periods=None,model_weights=None):
!>         """
!>         Object that 
           
!>         distribution(self,periods,
!>                      sites=None,event_set=None,
!>                      distances=None,magnitudes=None,
!>                      event_activity=None)
   
                        
           
!>         attenuation_model = "Toro_1997_midcontinent"
!>         or attenuation_model = ["Toro_1997_midcontinent", other models ...]
!>         max_pga=5.0
!>         """
>>         assert isinstance(periods,ndarray)
>>         if isinstance(attenuation_models,str):
!>             attenuation_models=[attenuation_models]
               
>>         self.model_names=[]        
>>         self.c_period=[]
>>         self.sigma_c_period=[]
           
>>         self.reference_c=[]
>>         self.reference_sigma_c=[]
>>         self.attenuation=[]
           
>>         self.magnitude_type=[]
>>         self.distance_type=[]
           
           # non-linear interpolation schemes may be used.
           # ie Gaulle uses the Australian model to interpolate.
>>         self.c_interpolation=[]
>>         self.sigma_c_interpolation=[]
   
   
>>         for model_name in attenuation_models:
>>             self.model_names.append(model_name)
>>             attenuation_model=attenuation_dict[model_name]
>>             coefficient_period=attenuation_model.coefficient_period
>>             sigma_coefficient_period=attenuation_model.sigma_coefficient_period
               
>>             self.c_period.append(coefficient_period)
>>             self.sigma_c_period.append(sigma_coefficient_period)
               
>>             self.reference_c.append(attenuation_model.coefficient)
               # reference_sigma_c
>>             self.reference_sigma_c.append(attenuation_model.sigma_coefficient)
               # atenuation function
>>             self.attenuation.append(attenuation_model.distribution)
               # string eg 'mM'
>>             self.magnitude_type.append(attenuation_model.magnitude_type)
>>             self.distance_type.append(attenuation_model.distance_type)
               
               # non-linear interpolation schemes may be used.
               # ie Gaulle uses the Australian model to interpolate.
>>             self.c_interpolation.append(attenuation_model.
>>                                         coefficient_interpolation)
               # The reference coeffiocients (defined at the reference
               # frequencies) gets interpolated to the new periods.
>>             self.sigma_c_interpolation.append(attenuation_model.
>>                                               sigma_coefficient_interpolation)
>>         if periods is not None:
>>             periods=asarray(periods)
>>             self.set_periods(periods)
>>         self.max_pga=None
   
>>         if model_weights is not None:
>!             model_weights=asarray(model_weights)
>>         self.model_weights=model_weights
   
!>     def set_periods(self,periods):        
>>         self.c,self.sigma_c=self.interpolated_coefficients(periods)
>>         self._periods=periods        
   
!>     def distribution(self,sites=None,event_set=None,
!>                      distances=None,magnitudes=None,depth=None,
!>                      event_activity=None,event_id=None):
           # flexible calling options
>>         if sites is not None:
>!             assert event_set is not None
>!             distances=sites.distances_from_event_set(event_set,
>!                                                      event_set_trace_starts=True)
               # get distance
>>         if event_set is not None:
>!             magnitudes = {'Mw':event_set.Mw,'ML':event_set.ML}
>!             depth = event_set.depth  # FIXME ws there this value
               # get magnitude
>>         assert distances is not None
>>         assert magnitudes is not None
           # now on to the code:
>>         magnitude_type=self.magnitude_type
>>         distance_type=self.distance_type
           
>>         distribution=self.distribution_function(
>>             dist=distances,mag=magnitudes,depth=depth,
>>             dist_type=distance_type,mag_type=magnitude_type,
>>             event_activity=event_activity,
>>             event_id=event_id)
                  
>>         return distribution
       
!>     def distribution_function(self,dist,mag,depth=None,
!>                               dist_type=None,mag_type=None,
!>                               event_activity=None,event_id=None):
!>         """
!>         Return self.attenuation(magnitudes,distances,c,sigma_c)
!>         """
>>         from scipy import asarray,allclose,newaxis
>>         c,sigma_c=self.c,self.sigma_c
>>         model_weights=self.model_weights
   
>>         if model_weights is not None:
>!             if not allclose(1,model_weights.sum()):
>!                 model_weights=-model_weights
>!                 if not allclose(1,model_weights.sum()):
!!                     print 'model_weights,',-model_weights
!!                     raise ValueError('abs(model_weights) did not sum to 1!')
               
>>         distributions=[]
>>         attenuation=self.attenuation
   
           # if only 1 dist type has been sent - make it a list
>>         if isinstance(dist_type,str) or dist_type is None:
!>             dist_type=[dist_type]
>>         if isinstance(mag_type,str) or mag_type is None:
!>             mag_type=[mag_type]
           
>>         multi_log_mean=[]
>>         multi_log_sigma=[]
   
>>         if event_id is not None:
>!             attenuation_ids=[]
>!             event_ids={}
>!             for key in event_id:
>!                 event_ids[key]=[]
           
>>         if event_activity is not None:
>!             event_activities=[]
           
>>         dist_object=dist
>>         mag_object=mag
   
>>         attenuation_id=0
>>         for (c,sigma_c,attenuation,dist_type,mag_type)in zip(
>>              c,sigma_c,attenuation,dist_type,mag_type):
               # iterate over every model
           
               # get the right distance and magnitudes out
               # (if that fails, assume it was literal dist and mag)
               #dist=dist.distance(distance_type)
>>             if dist_type is not None:
>>                 dist=dist_object.distance(dist_type)
!>             else:
                   #print 'using literal distances'
                   # nag message - we aren't really designed to do this
!>                 dist=asarray(dist_object)           
   
>>             if mag_type is not None:
>>                 mag=mag_object[mag_type]
!>             else:
                   #print 'using literal magnitudes'
                   # nag message - we aren't really designed to do this
!>                 mag=asarray(mag_object)
                   
>>             if depth is not None:     
>>                 depth=asarray(depth)
   
>>             if mag.size==1:
>>                 mag=mag.reshape([1])
>>                 if depth is not None:
>>                     depth=depth.reshape([1]) # Don't know if we have to do this
                   
                   # collapsed arrays are a bad idea...
                   
>>             assert len(mag.shape)==1
               
>>             mag=mag[newaxis,:,newaxis]
               
>>             if depth is not None:    
>>                 depth=depth[newaxis,:,newaxis]
               # [4.5,5.5,6.0] => site * mag * T
>>             assert len(dist.shape)<3
>>             if not len(dist.shape)==2:
                   # if distances is collapsed
!>                 if dist.size==1:
                       # if distances is size 1                   
!>                     dist=dist.reshape((1,1))
!>                 else:
!>                     assert len(dist.shape)==1
!>                     if mag.size>1:
!!                         assert dist.size==mag.size 
                           # therefore distance is 1 site * n magnitudes
!!                         dist=dist.reshape((1,mag.size))
!>                     else:
                           # therefore distance is n site * 1 magnitudes
!>                         dist=dist.reshape((dist.size,1))              
               # collapsed arrays are a bad idea...
               
>>             dist=dist[:,:,newaxis]
               # [[30.0,35.0],[45.0,20.0]]=> [site*mag] * T
>>             c=c[:,newaxis,newaxis,:]      
>>             sigma_c=sigma_c[:,newaxis,newaxis,:]
               
>>             """
>>             Adding lots of extra dimensions.
               
>>             'distance' had dimension [site]*[events]
>>             'magnitude' had dimension [events] 
>>             'c' had dimension [number of coefficients]*[Period]
>>             'sigma_c' had dimension [number of coefficients]*[Period]
               
>>             Now 'distance' and 'magnitude' have dimension:
>>                 [bonus dimension!]*[site]*[events]
               
>>             once 'c' and 'sigma_c are umpacked (ie c1,c2,c4,c6,c7,c10=c),
>>             they have dimension:
>>                 [bonus dimension!]*[site]*[events]
               
>>             Note that some of these dimensions are degenerate (newaxises),
>>             such as [site] for 'magnitude'.
               
>>             newaxis is used to broadcast arrays into higher dimensions:
>>                 a=array([1,2,3])
>>                 b=array([0,1])
>>                 a=a[...,newaxis]
>>                 print a
>>                     >[[1]
>>                     > [2]
>>                     > [3]]
                   
                   # if a is added to a 1D array of length n; a will act as:
                   #    [[1, 1, ... (n times],
                   #     [2, 2, ... (n times],
                   #     [3, 3, ... (n times]]
                   # (this is just broadcasting rules)
                   
>>                 a+b
>>                     >array([[1, 2],
>>                     >       [2, 3],
>>                     >       [3, 4]])
               
>>             Note that all [bonus dimensions] are degenerate.
>>             They are there because once the distribution is sampled,
>>             I want it to maintain the same number of dimension. I don't
>>             want it to add an extra dimension for the spawnings. If that
>>             happens, then it is hard to address futher samplings (from
>>             soil) or multi-models in a uniform manner.
               
>>             so ground_motion_from_toro =[gmd_torro]
>>             sampled ground_motion_from_toro = [gmd1,gmd2,gmd3, ... (n samples)]
>>             Uniform behaviour.
>>             """
>>             log_mean,log_sigma=attenuation(mag,dist,c,sigma_c,depth)
               
>>             assert isfinite(log_mean).all()
>>             assert isfinite(log_sigma).all()
               #print 'gmmlogmean',log_mean[0,:,:,:].sum(axis=0)
               #print 'gmmattn',mag[0,0,:,:],dist[0,0,:,:],c[:,0,0,:,:]
>>             multi_log_mean.append(log_mean)
>>             multi_log_sigma.append(log_sigma)
>>             if event_id is not None:
>!                 for key in event_ids:
>!                     event_ids[key].append(event_id[key])
>!                 attenuation_ids.append(attenuation_id+0*event_id['Event'])
                              
>>             if event_activity is not None:
>!                 event_activities.append(event_activity*model_weights[attenuation_id])
>>             attenuation_id+=1
           
           # make multi_log_sigma all the same shape
>>         sigma_shape=[log_sigma.shape for log_sigma in multi_log_sigma]
>>         max_sigma_shape=[]
>>         for i in range(len(sigma_shape[0])):
>>             max_sigma_shape.append(max([shape[i] for shape in sigma_shape]))
>>         max_sigma_shape=tuple(max_sigma_shape)
>>         from scipy import zeros
>>         max_sigma_array=zeros(max_sigma_shape)
>>         multi_log_sigma=[log_sigma+max_sigma_array for
>>                          log_sigma in multi_log_sigma]
           # End of code to make sigma all the same shape
           
           
>>         from ground_motion_distribution import Ground_motion_distribution
>>         from scipy import concatenate
   
>>         if event_activity is not None:
>!             event_activity=concatenate(event_activities)
              
           
                
>>         log_mean=concatenate(multi_log_mean,axis=1)
>>         log_sigma=concatenate(multi_log_sigma,axis=1)
           
>>         if event_id is not None:
>!             event_ids['Attenuation_model']=attenuation_ids
               
>!             for key in event_ids:
>!                 event_ids[key]=concatenate(event_ids[key])
!>         else:
!>             event_ids=None
   
>>         distribution=Ground_motion_distribution(log_mean,log_sigma,
>>                                                 event_activity,event_ids)
>>         distribution.max_pga=self.max_pga    
           # mean shape = mag,dist,period,1
>>         return distribution
       
!>     def interpolated_coefficients(self,new_period):
           # for one model:
           # new_c=c_interpolation(new_period,self.c,self.c_period) 
           # new_sigma_c=sigma_c_interpolation(new_period,sigma_c,sigma_c_period)
>>         new_c=[c_interpolation(new_period,c,c_period)
>>                for c_interpolation,c,c_period in
>>                zip(self.c_interpolation,self.reference_c,self.c_period)]
           # non-linear interpolation schemes may be used.
           # ie Gaull uses the Australian model to interpolate.
           # See attenuation models
           
>>         new_sigma_c=[sigma_c_interpolation(new_period,sigma_c,sigma_c_period)
>>                      for sigma_c_interpolation,sigma_c,sigma_c_period in
>>                      zip(self.sigma_c_interpolation,self.reference_sigma_c,
>>                          self.sigma_c_period)]
           # interpolated sigma_c
>>         return new_c,new_sigma_c
       
   
