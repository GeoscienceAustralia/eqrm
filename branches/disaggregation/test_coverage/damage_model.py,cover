>> """
>>  Title: damage model
     
>>   Author:  Peter Row, peter.row@ga.gov.au
   
   
>>   Description: A class to convert csv files to arrays.
     
   
>>   Version: $Revision: 935 $  
>>   ModifiedBy: $Author: dgray $
>>   ModifiedDate: $Date: 2009-04-15 11:00:57 +1000 (Wed, 15 Apr 2009) $
     
>>   Copyright 2007 by Geoscience Australia
>> """
    
!> from scipy.stats import norm
!> from scipy import where, newaxis, array, asarray, log
   
!> from eqrm_code.capacity_spectrum_model import Capacity_spectrum_model
   
!> class Damage_model(object):
!>     """
!>     attributes:
!>       structure_state: only created after get_building_states is called.
!>         Axis of sites, model_generated_psudo_events, 4 (# of damage states)
!>     """
!>     def __init__(self, structures, SA, periods, magnitudes,
!>                  var_bcap_flag, stdcap, # THE_PARAM_T values
!>                  csm_params=None):
!>         """
!>         Class to determine the damage and economic loss.
           
!>         SA - array of Spectral Acceleration, in g, with axis;
!>              site, period, return_period
!>              The site axis usually has a size of 1
!>         periods - array, 1 axis
!>         magnitudes - array, 1 axis
!>         structures - a Structures instance
           
!>         csm_params - capacity spectrum method params
           
!>         One Damage_model instance is created for each site,
!>         in calc_total_loss.  The structures value will be different for
!>         each site.
!>         """
           
>>         self.structures=structures
           
>>         self.periods=periods
>>         self.magnitudes=magnitudes
>>         self.SA=SA
>>         self.var_bcap_flag = var_bcap_flag
>>         self.stdcap = stdcap
           
           
>>         if csm_params is None:
!>             csm_params={
!>                 'damp_flags_1':0,
!>                 'damp_flags_3':0,
!>                 'damp_flags_2':0,
!>                 'rtol':0.01,
!>                 'max_iterations':7,
!>                 'sdtcap':0.3,
!>                 'var_bcap_flag':0,
!>                 'bcap_var_method':0,
!>                 'Harea_flag':1,
!>                 'resp_crv_flag':0,
!>                 'pga_mindamage':0.0}
   
               #csm_params={'cutoff_at_max':False,'smooth_damping':True}
           
>>         csm_params['periods']=periods
>>         csm_params['building_parameters']=structures.building_parameters
>>         csm_params['magnitudes']=magnitudes
           #print "csm_params", csm_params
>>         self.capacity_spectrum_model=Capacity_spectrum_model(**csm_params)
           
       
!>     def get_building_states(self):
!>         """
           
!>         Determine the cumulative probability of a building being or
!>         exceeding a given damage state for 3 types of damage;
!>         structure, non_structural, acceleration_sensitive.
           
!>         """
>>         var_bcap_flag = self.var_bcap_flag
>>         stdcap = self.stdcap
           
>>         beta_th_sd    = 0.4
>>         beta_th_nsd_d = 0.5
>>         beta_th_nsd_a = 0.6
>>         beta_bridge = 0.6
>>         if (var_bcap_flag == 0):
               #incorporate buiding cap variability into the beta
               # (may not be correct!)
>!             beta_sd    = (beta_th_sd**2+stdcap**2)**(0.5)
>!             beta_nsd_d = (beta_th_nsd_d**2+stdcap**2)**(0.5)
>!             beta_nsd_a = (beta_th_nsd_a**2+stdcap**2)**(0.5)
>>         elif (var_bcap_flag == 1) :#normal case:
>>             beta_sd    = beta_th_sd
>>             beta_nsd_d = beta_th_nsd_d
>>             beta_nsd_a = beta_th_nsd_a
!!         elif (var_bcap_flag == -1):
!!             beta_sd    = 0.0
!!             beta_nsd_d = 0.0
!!             beta_nsd_a = 0.0
     #warning: this option will cause divide by zero warnings in make_fragility.m
!!         else:
!!             raise 'ERORR in prep_build_vun: var_bcap_flag not properly defined'
           
>>         SA,SD=self.get_building_displacement()
>>         SA=SA.round(4)
>>         SD=SD.round(4)
           #print 'get_building_states SDSA',SD,SA
                   
>>         building_parameters=self.structures.building_parameters
           
>>         threshold=building_parameters['structural_damage_threshold']
           # reshape threshold so it is [sites,magnitudes,damage_states]
>>         threshold=threshold[:,newaxis,:]
>>         assert len(threshold.shape)==3
           # threshold is [sites,1,damage_states]
           # 
>>         SA=SA[:,:,newaxis]
>>         SD=SD[:,:,newaxis]
>>         assert len(SA.shape)==3
>>         assert len(SD.shape)==3
>>         structure_state=state_probability(threshold,beta_th_sd,SD)  
   
>>         threshold=building_parameters['drift_threshold']  
>>         threshold=threshold[:,newaxis,:]
>>         non_structural_state=state_probability(threshold,beta_nsd_d,SD)
    
>>         threshold=building_parameters['acceleration_threshold']
>>         threshold=threshold[:,newaxis,:]
>>         acceleration_sensitive_state=state_probability(threshold,beta_nsd_a,SA)
           #print "get_building_states structure_state", structure_state
>>         self.structure_state = structure_state  # for writing to file
>>         return structure_state,non_structural_state, \
>>                acceleration_sensitive_state
   
!>     def get_building_displacement(self):
           
           #import time
           #t0=time.time()
>>         point=self.capacity_spectrum_model.building_response(self.SA)
           # point is SA,SD 
           #print 'got point in ',time.time()-t0
>>         return point
   
!>     def building_loss(self,ci=None,aus_contents_flag=0):
>>         damage_states=self.get_building_states()
>>         total_costs=self.structures.cost_breakdown(ci=ci)
           
>>         structure_state,non_structural_state,acceleration_sensitive_state= \
>>                                                             damage_states
>>         structure_cost,non_structural_cost,acceleration_cost,contents_cost= \
>>                                                             total_costs
   
           # hardwired loss for each damage state
>>         f1=array((0.02,0.1,0.5,1.0))[newaxis,newaxis,:]
>>         f2=array((0.02,0.1,0.5,1.0))[newaxis,newaxis,:]
>>         f3=array((0.02,0.1,0.3,1.0))[newaxis,newaxis,:]
>>         f4=array((0.01,0.05,0.25,0.5))[newaxis,newaxis,:]
>>         if aus_contents_flag==1:
!!             f4=f4*2 # 100% contents loss if bulding collapses
           
>>         structure_ratio=(f1*structure_state)#.sum(axis=-1)
>>         nsd_ratio=(f2*non_structural_state)#.sum(axis=-1)
>>         accel_ratio=(f3*acceleration_sensitive_state)#.sum(axis=-1)
>>         contents_ratio=(f4*acceleration_sensitive_state)#.sum(axis=-1)
           
>>         loss_ratio=structure_ratio,nsd_ratio,accel_ratio,contents_ratio
   
           
>>         structure_loss=structure_ratio*structure_cost[:,newaxis,newaxis]
>>         nsd_loss=nsd_ratio*non_structural_cost[:,newaxis,newaxis]
>>         accel_loss=accel_ratio*acceleration_cost[:,newaxis,newaxis]
>>         contents_loss=contents_ratio*contents_cost[:,newaxis,newaxis]
   
>>         total_loss=structure_loss,nsd_loss,accel_loss,contents_loss        
>>         return loss_ratio,total_loss
   
!>     def aggregated_building_loss(self,ci=None,aus_contents_flag=0):
>>         loss_ratio,total_loss=self.building_loss(
>>             ci=ci,aus_contents_flag=aus_contents_flag)
>>         total_loss = tuple([loss.sum(axis=-1) for loss in total_loss])
>>         return total_loss
   
!>     def annualised_loss(self,event_activity):
!!         event_activity=event_activity[:,newaxis]
   
!!         building_loss=self.aggregated_building_loss()
!!         raise NotImplementedError
   
!> def state_probability(threshold,beta,value):
!>     """
!>     Calculate the state probabilities for a given threshold, beta and value
   
!>     Threshold = [0.2,0.5,0.8] = low,mid,exteme,complete
   
!>     Returns p(low),p(mid)...
!>     """
>>     p = cumulative_state_probability(threshold,beta,value)
>>     reduce_cumulative_to_pdf(p)
>>     return p
   
!> def reduce_cumulative_to_pdf(p):
!>     """
!>     Change cumulative state probabilities to a distribution (discretized pdf)
!>     """
>>     p[...,:-1]-=p[...,1:]
       
   
!> def cumulative_state_probability(threshold,beta,value):
!>     """
!>     Calcultate the cumulative state probability.
   
!>     P_cumulative(slight) = P(slight)+P(mid)+P(high)...
   
!>     Note that value/threshold is the median, not the mean.
!>     """
   
       # Pr11 = normcdf2(1/THE_VUN_T.('beta_nsd_d')*log(SDcrAll./Thresh))
       
       # function y = normcdf(x);
       # Glenn Fulford: 6/3/02.
       # cumulative normal distribution function
       # root2 = sqrt(2); 
       # y = 0.5*(1+erf(x/root2));
   
!>     """
       #Straight from matlab:
       
!>     x=(1/beta)*log(value/threshold)
!>     from scipy import sqrt
!>     from scipy.special import erf
!>     return 0.5*(1+erf(x/sqrt(2)))
!>     """
>>     return norm.cdf((1/beta)*log(value/threshold))
       
   
!> def calc_total_loss(sites, SA, THE_PARAM_T, event_set_Mw):
!>     """ Calculate the economic loss and damage state of a structure.
   
!>     Args:
!>       sites: A Structures instance.
!>       THE_PARAM_T: High level controlling object.  
!>       SA: Array of Spectral Acceleration, in g, with axis;
!>         site, period, return_period
!>         The site axis usually has a size of 1
!>       event_set_Mw: array of Mw, 1 axis
         
!>     Returns:
!>       total_loss: A 4 long list of dollar loss.  The loss categories are;
!>        structure_loss, nsd_loss, accel_loss, contents_loss
!>       damage_model: An instance of the damage model.
!>         Used in risk.py to get damage states.
!>     """
       
       # note: damage_model has an object called capacity_spectrum_model
       #       buried inside, which will now calculate capacity curves
       #       parameters
       # csm_params are parameters for the capacity_spectrum_model
>>     damage_model=Damage_model(sites,SA,THE_PARAM_T.periods,
>>                               event_set_Mw,
>>                               int(THE_PARAM_T.var_bcap_flag),
>>                               float(THE_PARAM_T.stdcap),
>>                               csm_params={
>>         'damp_flags_1':THE_PARAM_T.damp_flags[0],
>>         'damp_flags_2':THE_PARAM_T.damp_flags[1],
>>         'damp_flags_3':THE_PARAM_T.damp_flags[2],
>>         'rtol':THE_PARAM_T.SDRelTol/100.0,
>>         'max_iterations':THE_PARAM_T.max_iterations,
>>         'sdtcap':THE_PARAM_T.stdcap, #FIXME sdt -> std
>>         'var_bcap_flag':THE_PARAM_T.var_bcap_flag,
>>         'bcap_var_method':THE_PARAM_T.bcap_var_method,
>>         'Harea_flag':THE_PARAM_T.Harea_flag,
>>         'resp_crv_flag':int(THE_PARAM_T.resp_crv_flag),
>>         'pga_mindamage':THE_PARAM_T.pga_mindamage
>>         })
       
       # Note, aggregate slight, medium, critical damageCompute building
       # damage and loss (LOTS done here!)
>>     total_loss=damage_model.aggregated_building_loss(
>>         ci=THE_PARAM_T.ci,
>>         aus_contents_flag=THE_PARAM_T.aus_contents_flag)
>>     return total_loss, damage_model
   
