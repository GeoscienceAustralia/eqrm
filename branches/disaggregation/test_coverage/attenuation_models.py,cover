!> from scipy import array,asarray,exp,log,allclose,newaxis,ones
!> from ground_motion_distribution import Ground_motion_distribution\
!>      as Log_normal_distribution
!> from interp import interp
   
!> class Attenuation_model(object):
!>     """
!>     The standard interface for attenuation models. Used by Ground_motion_model.
   
!>     Ground motion model instances get attribute data directly out of the
!>     instances of this class.
       
!>     distribution(mag,distance,coefficient,sigma_coefficient) is the part
!>     that does all the work. Anything that calls distribution with
!>     will have make sure that distance and mag are correctly sized.
   
       
!>     parameters / members:
!>     ---------------------
   
!>     distribution : the distribution used
!>     n.b. distribution is the attenuation_function
   
!>     magnitude_type : string
!>                      magnitude used in the attenuation function
                        
!>     distance_type : string
!>                     distance type used in the attenuation function
   
!>     coefficient : n*T array
!>                   the n attenuation coefficients, for T periods
   
!>     coefficient_period : T array
!>                          The T reference periodes at which the attenuation
!>                          coefficients are defined
   
!>     coefficient_interpolation : function. args should be:
!>                                 new_period,coefficients,old_period
                                   
                            
!>     sigma_coefficient : same as coeficient, but for standard deviation
!>                         nb, may defined at different reference periods
!>                         to coefficient.
   
!>                         Also, should be defined for more than one period,
!>                         to avoid the interpolation crashing.
!>                         If sigma is constant (ie 1.2) use ie (1.2,1.2) over
!>                         arbitrary reference periods ie (0,1)
   
!>     sigma_coefficient_periods : reference periods for sigma_coefficients
   
!>     sigma_coefficient_interpolation : function. args should be:
!>                                       new_period,coefficients,old_period
                                         
!>     test_distance : the set of distances used by verification tests
   
!>     test_magnitude : the set of magnitudes used by verification tests
   
!>     test_period : the set of periods used by verification tests
   
!>     test_mean : the means that must be matched be verification tests
!>     """
!>     def __init__(self,distribution,magnitude_type,distance_type,
!>                  coefficient,coefficient_period,
!>                  coefficient_interpolation,
!>                  sigma_coefficient,sigma_coefficient_period,
!>                  sigma_coefficient_interpolation,
!>                  test_distance,test_magnitude,test_period,test_mean,
!>                  test_depth=None):
           
!>         self.distribution=distribution
!>         self.magnitude_type=magnitude_type
!>         self.distance_type=distance_type
           
!>         self.coefficient=coefficient
!>         self.coefficient_period=coefficient_period
!>         self.coefficient_interpolation=coefficient_interpolation
           
!>         self.sigma_coefficient=sigma_coefficient
!>         self.sigma_coefficient_period=sigma_coefficient_period
!>         self.sigma_coefficient_interpolation=sigma_coefficient_interpolation
           
!>         self.test_distance=test_distance
!>         self.test_magnitude=test_magnitude
!>         self.test_period=test_period
!>         self.test_mean=test_mean
!>         if test_depth is not None:
!>             self.test_depth=test_depth
!>         else:
!>             self.test_depth=None
!>         '''
!>         if not self.is_valid():
               # maybe the periods are in decending order, in which case:
!>             self.reverse()
!>         assert self.is_valid()
!>         '''
       
!>     def is_valid(self):
!>         """
!>         It is a requirement of the interpolation routine that
!>         the periods are sorted in ascending order.
!>         """
!!         a=self.coefficient_period.copy()
!!         b=self.coefficient_period.copy()
!!         b.sort()
!!         if not allclose(a,b):
!!             return False        
   
!!         a=self.sigma_coefficient_period.copy()
!!         b=self.sigma_coefficient_period.copy()
!!         b.sort()
!!         if not allclose(a,b):
!!             return False     
!!         return True
   
!>     def reverse(self):
!>         """
!>         Reverse all arrays across period.
   
!>         Interp requires the periods to be in accending order.
!>         """
!!         reverse=self.__reversed_array
!!         self.coefficient=reverse(self.coefficient,-1)
!!         self.coefficient_period=reverse(self.coefficient_period,-1)
!!         self.sigma_coefficient=reverse(self.sigma_coefficient,-1)
!!         self.sigma_coefficient_period=reverse(self.sigma_coefficient_period,-1)
!!         self.test_period=reverse(self.test_period,-1)
!!         self.test_mean=reverse(self.test_mean,-2)
           
!>     def __reversed_array(self,array,axis=0):
!>         """
!>         reverse the array (across the last axis)
!>         """
!!         if axis>0:
!!             array=array[tuple([slice(None)]*axis+[slice(None,None,-1)])]
               # ie array[:,:,:,::-1]
!!         else:
!!             array=array[tuple([Ellipsis]+[slice(None,None,-1)]
!!                               +[slice(None)]*(-axis-1))]
               # ie array[...,::-1,:,:,:]
   
!!         return array
   
!> def linear_interpolation(new_period,coefficients,old_period):
!>     """
!>     linearly interpolate (or extrapolate) coefficients as a function of period
!>     """
>>     new_c=[]
>>     for c in coefficients:
>>         new_c.append(interp(new_period,c,old_period,
>>                             extrapolate_high=False,extrapolate_low=False))
>>     new_c=asarray(new_c)
>>     return new_c
   
!> def Australian_standard_model(periods):
>>     T1=0.1
>>     T2=0.3
>>     T3=0.7
>>     T4=3.0
       
>>     P1=1.0
>>     P2=1.92
>>     P3=0.82
>>     P4=0.045
   
>>     b1 = (periods<=T1)
>>     b2 = (periods>T1) * (periods<=T2)
>>     b3 = (periods>T2) * (periods<=T3)
>>     b4 = (periods>T3)
       
>>     S1 = P1+(P2-P1)/T1*periods #linear
       
>>     periods=periods-(1*(periods==0.0)) # get rid of div0 errors
       # this comes after the S1 calculation, so it doesn't mess up S1
       
>>     S2 = P2+0*periods # flat
>>     S3 = (P3/periods)*T3 # 1/T
>>     S4 = (P4/(periods*periods))*(T4*T4); # 1/T^2
   
>>     c = (b1*S1 + b2*S2 + b3*S3 + b4*S4)
>>     return c
       
!> def Australian_standard_model_interpolation(new_period,c,old_period):
!>     """
!>     Scale c to the Australian standard model at new_period.
   
!>     old_period is not used, but is part of the interpolation interface.
!>     """
>>     new_period=asarray(new_period)
>>     c=asarray(c)
>>     new_c=Australian_standard_model(new_period)*c
>>     return new_c
   
!> def matlab_to_array(filename):
!>     """
!>     Scripting function to get coefficients out of txt files used by matlab.
!>     """
!!     f=open(filename)
!!     lines=f.readlines()
!!     a=[l.strip('\n') for l in lines if not l.startswith('%')]
!!     a=[line.replace('\t',' ') for line in a]
!!     a=[[float(num) for num in line.split(' ') if not num==''] for line in a]
!!     a=asarray(a,dtype=float)
!!     f.close()
!!     return a
   
!> Allen_coefficient_period=array([ 10.,5. ,3.003 , 2. ,   1.6   ,   1.,
!>          0.7502,   0.5   ,   0.4   ,   0.3   ,   0.24  ,   0.2   ,
!>          0.16  ,   0.15  ,   0.12  ,   0.1   ,   0.08  ,   0.07  ,
!>          0.06  ,   0.055 ,   0.05  ,   0.04  ,   0.0323,   0.025 ,
!>          0.02  ,   0.01  ])
!> Allen_coefficient=(
!>     array([[-21.8702, -18.3005, -15.225 , -12.7432, -11.4433,  -8.5082,
!>             -6.7579,  -4.4525,  -3.3069,  -1.8805,  -0.8188,   0.1416,
!>             1.0249,   1.205 ,   1.9958,   2.3232,   2.3007,   2.1033,
!>             1.6085,   1.348 ,   1.0695,   0.4338,   0.0729,  -0.3766,
!>             -0.5665,  -0.7655],
!>            [  2.8736,   2.6008,   2.3016,   2.0264,   1.8696,   1.5271,
!>               1.3317,   1.0786,   0.9523,   0.8122,   0.7134,   0.6282,
!>               0.5411,   0.5212,   0.436 ,   0.3878,   0.3603,   0.3595,
!>               0.38  ,   0.3908,   0.4033,   0.4371,   0.4605,   0.4954,
!>               0.5118,   0.5302],
!>            [-11.    , -10.    ,  -9.7   ,  -9.2   ,  -8.4   ,  -0.7   ,
!>             0.2   ,   0.9   ,   1.2   ,   1.5   ,   1.7   ,   1.9   ,
!>             2.    ,   2.    ,   2.1   ,   2.1   ,   2.    ,   1.9   ,
!>             1.7   ,   1.6   ,   1.5   ,   1.3   ,   1.3   ,   1.2   ,
!>             1.2   ,   1.2   ],
!>            [ -1.0306,  -1.0884,  -1.1887,  -1.2996,  -1.3656,  -1.5514,
!>              -1.6958,  -1.921 ,  -2.0661,  -2.2576,  -2.4222,  -2.5899,
!>              -2.7617,  -2.8002,  -2.9774,  -3.0705,  -3.1098,  -3.0987,
!>              -3.0347,  -3.0013,  -2.9643,  -2.8732,  -2.8224,  -2.7489,
!>              -2.7181,  -2.6852],
!>            [  0.0222,   0.0239,   0.0325,   0.0433,   0.0496,   0.0665,
!>               0.0789,   0.0967,   0.1081,   0.1221,   0.1343,   0.1471,
!>               0.1618,   0.1655,   0.1826,   0.1937,   0.2021,   0.2044,
!>               0.2029,   0.2023,   0.2013,   0.1977,   0.1952,   0.1899,
!>               0.1874,   0.1845],
!>            [ -0.24  ,  -0.365 ,  -0.4074,  -0.4016,  -0.385 ,  -0.3224,
!>              -0.2778,  -0.214 ,  -0.1844,  -0.1517,  -0.132 ,  -0.1197,
!>              -0.109 ,  -0.1067,  -0.1015,  -0.0999,  -0.1007,  -0.1022,
!>              -0.1049,  -0.1067,  -0.1087,  -0.1136,  -0.1182,  -0.1217,
!>              -0.1235,  -0.1255]]))
!> Allen_sigma_coefficient_period=Allen_coefficient_period.copy()
!> Allen_sigma_coefficient=(
!>     array([[ 1.2756,  1.1358,  0.9711,  0.8642,  0.7764,  0.6627,  0.6599,
!>              0.5899,  0.5648,  0.557 ,  0.533 ,  0.5208,  0.5101,  0.5114,
!>              0.5184,  0.4997,  0.489 ,  0.4884,  0.4918,  0.4851,  0.4891,
!>              0.4847,  0.4793,  0.4742,  0.4768,  0.4774],
!>            [ 0.235 ,  0.258 ,  0.2739,  0.2938,  0.3074,  0.3373,  0.3546,
!>              0.3832,  0.4015,  0.4298,  0.456 ,  0.4786,  0.4996,  0.5064,
!>              0.5219,  0.5327,  0.5211,  0.5074,  0.4848,  0.4696,  0.4574,
!>              0.4525,  0.4547,  0.4482,  0.4429,  0.4404]]))
!> Allen_test_distance=array([30.0])
!> Allen_test_distance=Allen_test_distance[:]
!> Allen_test_magnitude=array([4.5,5.5,6.5,7.5])
   
!> Allen_test_period = (
!>     array([10,	5,	3.003,	2,	1.6,	1,   0.7502,	0.5,	0.4,
!>            0.3,	0.24,   0.2,	0.16,	0.15,	0.12,	0.1,	0.08,   0.07,
!>            0.06,	0.055,	0.05,	0.04,   0.0323,	0.025,	0.02,	0.01]))
!> Allen_test_mean = (
!>     array([[3.2254E-06,	        2.13427E-05,	8.87049E-05,	0.000252186,
!>             0.000417375,	0.001306295,	0.002466791,	0.005243502,
!>             0.006902655,	0.009918957,	0.012370647,	0.014320455,
!>             0.015778327,	0.016025567,	0.016223227,	0.015530954,
!>             0.01394683, 	0.012796361,	0.011232611,	0.010404032,
!>             0.009575646,	0.007988456,	0.007033039,	0.006323007,
!>             0.006004762,	0.005705212],
!>            [9.95104E-05,	0.000647191,	0.00223538,	0.004949904,
!>             0.00692064,	        0.014388865,	0.021358797,	0.033117945,
!>             0.037781213,	0.046639186,	0.05309692,	0.057929389,
!>             0.060564862,	0.06082379,	0.059763646,	0.056588616,
!>             0.050848608,	0.046959793,	0.041793723,	0.039061642,
!>             0.036325878,	0.031109154,	0.028047,	0.02575876,
!>             0.024736682,	0.023791819],
!>            [0.001899581,	0.009457791,	0.024941229,	0.043514938,
!>             0.053137664,	0.083172304,	0.106111365,	0.136349428,
!>             0.14301618,	        0.161925188,	0.175028939,	0.184439357,
!>             0.186959589,	0.186501006,	0.179721983,	0.168848289,
!>             0.151573893,	0.140471229,	0.126081821,	0.118478144,
!>             0.110874377,	0.096535107,	0.088307451,	0.082260788,
!>             0.0796006,	        0.077194124],
!>            [0.022436299,	0.066607118,	0.123210362,	0.171334928,
!>             0.188927578,	0.252288718,	0.302473782,	0.365924329,
!>             0.374407046,	0.415103448,	0.443112515,	0.462190253,
!>             0.464132514,	0.461994169,	0.441193996,	0.412573097,
!>             0.369412442,	0.342507519,	0.308393321,	0.290311959,
!>             0.272278449,	0.238700914,	0.219520869,	0.205933712,
!>             0.200087748,	0.194868491]]))
   
!> Allen_test_mean=Allen_test_mean[newaxis,:,:]
!> Allen_interpolation=linear_interpolation
   
!> def Allen_distribution(mag,distance,coefficient,sigma_coefficient,r_z=None):      
!>     c1,c2,c4,c6,c7,c10=coefficient
!>     model_sigma,regression_sigma=sigma_coefficient
!>     log_mean=c1+c2*mag+log((distance+exp(c4))**(c6+c7*mag))+c10*(mag-6.0)**2
!>     log_sigma=(model_sigma+regression_sigma)
!>     return log_mean,log_sigma
   
   
!> Allen_magnitude_type='Mw'
!> Allen_distance_type='Hypocentral'
   
!> Allen_args=[
!>     Allen_distribution,
!>     Allen_magnitude_type,
!>     Allen_distance_type,
       
!>     Allen_coefficient,
!>     Allen_coefficient_period,
!>     Allen_interpolation,
       
!>     Allen_sigma_coefficient,
!>     Allen_sigma_coefficient_period,
!>     Allen_interpolation,
       
!>     Allen_test_distance,
!>     Allen_test_magnitude,
!>     Allen_test_period,
!>     Allen_test_mean]
   
!> Allen=Attenuation_model(*Allen_args)
   
!> Gaull_1990_WA_magnitude_type='ML'
!> Gaull_1990_WA_distance_type='Rupture'
!> Gaull_1990_WA_coefficient=array([log(0.025),1.10,1.03,log(9.8)])
!> Gaull_1990_WA_coefficient_period=array([0.0])
!> Gaull_1990_WA_sigma_coefficient=array([[0.28,0.28]])
!> Gaull_1990_WA_sigma_coefficient_period=array([0.0,1.0])
   
!> def Gaull_1990_WA_distribution(mag,distance,coefficient,sigma_coefficient,r_z=None):
!>     """
!>     The coefficient is a list of  ( exp(a),b,c,?)
!>      based on eq(5.6) from the EQRM tech manual
!>     """
>>     a,b,c,d=coefficient
>>     log_sigma=sigma_coefficient[0]
>>     log_mean=a+b*mag-c*log(distance)-d
>>     return log_mean,log_sigma
   
!> def Gaull_1990_WA_coefficient_interpolation(new_period,c,old_period,r_z=None):
!>     """
!>     Gaull isn't interpolated, it is scaled to the Australian standard model.
   
!>     Note that a is the only coefficient scaled. Scaling the other ones
!>     doesn't make sense - the linear form of Gaull is:
!>         exp(a) * exp(b*mag) * distance**(-c) / g
   
!>     So to achieve linear scaling (in the real world), exp(a) is scaled
!>     by the ASM, and everything else is kept constant.
       
       
!>     input: c=[a,b,c,d]
!>     output: c=[new_a_array,b_array,c_array,d_array]
   
       #FIXME(DSG-EQRM) FIXME(DSG-PR)what are new_period & old_period?
!>     """
>>     a,b,c,d=c
   
       # put log_space a into the real world
>>     a=exp(a)
       
>>     new_a=Australian_standard_model_interpolation(new_period,a,old_period)
       # scale it to the ASM
       
>>     new_a=log(new_a)
       # bring it back to log space
       
       # resize the other coefficients to match the new a
>>     new_b=b+new_a*0
>>     new_c=c+new_a*0
>>     new_d=d+new_a*0
>>     return asarray([new_a,new_b,new_c,new_d])
       
!> Gaull_1990_WA_sigma_coefficient_interpolation=linear_interpolation
   
   # getting test data
!> a=0.025
!> b=1.10
!> c=1.03
!> g=9.8
!> R=array([[00.1,20.0,30],[50,60,80]])
!> ML=array([4,5.5,6.5])
!> Gaull_1990_WA_test_distance=R
!> Gaull_1990_WA_test_magnitude=ML
   
!> R=R[:,:,newaxis]
!> ML=ML[newaxis,:,newaxis]
!> mean=a*exp(b*ML)*(R**-c)
   
!> period=array([0.00,0.05,0.10,0.20,0.30,0.50,0.70,1.00,3.00,4.00])
!> scale=Australian_standard_model_interpolation(period,1.0,0.0)
!> mean=mean*scale[newaxis,newaxis,:]
!> mean=mean/g
   
!> Gaull_1990_WA_test_mean=mean[:]
!> Gaull_1990_WA_test_period=period
   # end getting test data
   
!> Gaull_1990_WA_args=[
!>     Gaull_1990_WA_distribution,
!>     Gaull_1990_WA_magnitude_type,
!>     Gaull_1990_WA_distance_type,
       
!>     Gaull_1990_WA_coefficient,
!>     Gaull_1990_WA_coefficient_period,
!>     Gaull_1990_WA_coefficient_interpolation,
       
!>     Gaull_1990_WA_sigma_coefficient,
!>     Gaull_1990_WA_sigma_coefficient_period,
!>     Gaull_1990_WA_sigma_coefficient_interpolation,
       
!>     Gaull_1990_WA_test_distance,
!>     Gaull_1990_WA_test_magnitude,
!>     Gaull_1990_WA_test_period,
!>     Gaull_1990_WA_test_mean]
   
!> Gaull_1990_WA=Attenuation_model(*Gaull_1990_WA_args)
   # put all the arguments into Attenuation_model
   
!> Toro_1997_midcontinent_coefficient=(
!>     array([[  2.20000000e+00,  2.20000000e+00,   4.00000000e+00,   3.68000000e+00,
!>               2.37000000e+00,   1.73000000e+00,   1.07000000e+00,
!>               9.00000000e-02,  -7.40000000e-01,  -3.23000000e+00],
!>            [  8.10000000e-01,  8.10000000e-01,   7.90000000e-01,   8.00000000e-01,
!>               8.10000000e-01,   8.40000000e-01,   1.05000000e+00,
!>               1.42000000e+00,   1.86000000e+00,   3.18000000e+00],
!>            [  0.00000000e+00,  0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>               0.00000000e+00,   0.00000000e+00,  -1.00000000e-01,
!>               -2.00000000e-01,  -3.10000000e-01,  -6.40000000e-01],
!>            [  1.27000000e+00, 1.27000000e+00,   1.57000000e+00,   1.46000000e+00,
!>               1.10000000e+00,   9.80000000e-01,   9.30000000e-01,
!>               9.00000000e-01,   9.20000000e-01,   9.80000000e-01],
!>            [  1.16000000e+00,  1.16000000e+00,   1.83000000e+00,   1.77000000e+00,
!>               1.02000000e+00,   6.60000000e-01,   5.60000000e-01,
!>               4.90000000e-01,   4.60000000e-01,   3.70000000e-01],
!>            [  2.10000000e-03, 2.10000000e-03,   8.00000000e-04,   1.30000000e-03,
!>               4.00000000e-03,   4.20000000e-03,   3.30000000e-03,
!>               2.30000000e-03,   1.70000000e-03,  -1.00000000e-04],
!>            [  9.30000000e+00,   9.30000000e+00,   1.11000000e+01,   1.05000000e+01,
!>               8.30000000e+00,   7.50000000e+00,   7.10000000e+00,
!>               6.80000000e+00,   6.90000000e+00,   7.20000000e+00]]))
   
!> Toro_1997_midcontinent_coefficient_period=(
!>     array([  0.00000000e+00,   0.02,2.85000000e-02,   4.00000000e-02,
!>              1.00000000e-01,   2.00000000e-01,   4.00000000e-01,
!>              1.00000000e+00,   2.00000000e+00,   5.00000000e+00]))
   
!> Toro_1997_midcontinent_sigma_coefficient=(
!>     array([[0.55, 0.55, 0.62, 0.62, 0.59, 0.60, 0.63, 0.63, 0.61, 0.61],
!>            [0.59,0.59, 0.63, 0.63, 0.61, 0.64, 0.68, 0.64, 0.62, 0.62],
!>            [0.50, 0.50, 0.50, 0.50, 0.50, 0.56, 0.64, 0.67, 0.66, 0.66],
!>            [0.54, 0.54, 0.62, 0.57, 0.50, 0.45, 0.45, 0.45, 0.45, 0.45],
!>            [0.20, 0.20, 0.35, 0.29, 0.17, 0.12, 0.12, 0.12, 0.12, 0.12],
!>            [0.36,0.36,0.36,0.36,0.36,0.36,0.36,0.35,0.34,0.34],
!>            [0.7,0.7,0.7,0.7,0.7,0.7,0.7,0.65,0.6,0.6]]))
   
!> Toro_1997_midcontinent_sigma_coefficient_period=(
!>     array([0, 0.02, 1.0/35, 0.04, 0.1, 0.2, 0.4, 1, 2, 10]))
   
       #Tref = [0 1/35, 0.04, 0.1 0.2 0.4 1 2 10];
       #origd1 = [0.55 0.62 0.62 0.59 0.60 0.63 0.63 0.61 0.61];
       #origd2 = [0.59 0.63 0.63 0.61 0.64 0.68 0.64 0.62 0.62];
       #origd3 = [0.50 0.50 0.50 0.50 0.56 0.64 0.67 0.66 0.66];
   
       #Tref = [0 1/35 0.04, 0.1 0.2 0.4 1 2 10];
       #origf1 = [0.54 0.62 0.57 0.50 0.45 0.45 0.45 0.45 0.45];
       #origf2 = [0.20 0.35 0.29 0.17 0.12 0.12 0.12 0.12 0.12];
   
       #epistemic1 = [0.36,0.36,0.36,0.36,0.36,0.36,0.35,0.34,0.34]
       #epistemic2 = [0.7,0.7,0.7,0.7,0.7,0.7,0.65,0.6,0.6]
   
!> def Toro_1997_midcontinent_distribution_python(mag,distance,coefficient,
!>                                         sigma_coefficient,r_z=None):
!!     from scipy import where,sqrt    
!!     c1,c2,c3,c4,c5,c6,c7=coefficient
!!     d1,d2,d3,f1,f2,e1,e2=sigma_coefficient
       
!!     Rm=sqrt(distance**2+c7**2)
!!     log_Rm=log(Rm)
       #log_mean=c1+c2*(mag-6.0)+c3*((mag-6.0)**2)-c4*log(Rm)\
       #          -(c5-c4)*where(log(Rm/100)>0,log(Rm/100),0)-c6*Rm
   
!!     log_mean=c1+c2*(mag-6.0)+c3*((mag-6.0)**2)-c4*log_Rm\
!!               -(c5-c4)*where((log_Rm-log(100))>0,(log_Rm-log(100)),0)-c6*Rm
!!     del log_Rm
   
!!     log_sigma_aleatory1=(mag<=5)*(d1)
!!     log_sigma_aleatory1+=(5<mag)*(mag<=5.5)*(d1+(d2-d1)*(mag-5)/0.5)
!!     log_sigma_aleatory1+=(5.5<mag)*(mag<=8)*(d2+(d3-d2)*(mag-5.5)/2.5)
!!     log_sigma_aleatory1+=(8<mag)*(d3)
       # getting the aleatory (mag part) sigma
!!     log_sigma_aleatory2=(distance<=5)*(f1)
!!     log_sigma_aleatory2+=(5<distance)*(distance<=20)*(f1+(f2-f1)*(distance-5)/15)
!!     log_sigma_aleatory2+=(20<distance)*f2
       # getting the aleatory (distance part) sigma
       ##log_epistemic=e1+e2*(mag-6)
       # getting model uncertainty
       ###log_sigma=sqrt(log_epistemic**2+log_sigma_aleatory1**2\
       ###               +log_sigma_aleatory2**2)
!!     log_sigma=sqrt(log_sigma_aleatory1**2+
!!                    log_sigma_aleatory2**2)                  
!!     return log_mean,log_sigma
   
!> def Toro_1997_midcontinent_distribution(mag,distance,coefficient,
!>                              sigma_coefficient,r_z=None):
>>     from scipy import weave
>>     from scipy.weave import converters
>>     from scipy import zeros
       
>>     num_sites,num_events=distance.shape[0:2]
>>     num_periods=coefficient.shape[3]
>>     assert coefficient.shape==(7,1,1,num_periods)
       #assert sigma_coefficient.shape==(7,1,1,num_periods)
>>     assert mag.shape==(1,num_events,1)
>>     assert distance.shape==(num_sites,num_events,1)
>>     log_mean=zeros((num_sites,num_events,num_periods),dtype=float)
       #log_sigma=zeros((num_sites,num_events,num_periods),dtype=float)
>>     log_sigma=0.0 # who cares - I think the python bit is fast enough.
   
>>     coefficient=coefficient[:,0,0,:]
>>     mag=mag[0,:,0]
>>     distance=distance[:,:,0]
       
>>     code="""
>>     double c1,c2,c3,c4,c5,c6,c7;
>>     double m,d;
>>     double Rm,log_Rm,log_Rm_100;
>>     int c_offset;
>>     for (int i=0; i<num_sites; ++i){
>>         for (int j=0; j<num_events; ++j){
>>             m=mag(j);
>>             d=distance(i,j);
               
>>             for (int k=0;k<num_periods;++k){
>>                 c1=coefficient(0,k);
>>                 c2=coefficient(1,k);
>>                 c3=coefficient(2,k);
>>                 c4=coefficient(3,k);
>>                 c5=coefficient(4,k);
>>                 c6=coefficient(5,k);
>>                 c7=coefficient(6,k);
                   
>>                 Rm=sqrt(d*d+c7*c7);
>>                 log_Rm=log(Rm);
>>                 log_Rm_100=log_Rm-log(100);
                   
>>                 if (log_Rm_100<0.0){
>>                     log_Rm_100=0.0;
>>                 }                   
>>                 log_mean(i,j,k)=c1+c2*(m-6.0)+c3*((m-6.0)*(m-6.0))
>>                                -c4*log_Rm-(c5-c4)*log_Rm_100-c6*Rm;
>>             }       
>>         }
>>     }
>>     return_val = 0;
>>     """
   
>>     weave.inline(code,
>>                 ['num_sites','num_events','num_periods',
>>                  'coefficient','sigma_coefficient',
>>                  'mag','log_mean','distance','log_sigma'],
>>                  type_converters=converters.blitz,
>>                  compiler='gcc')    
   
>>     from scipy import where,sqrt,newaxis
       
>>     coefficient=coefficient[:,newaxis,newaxis,:]
>>     mag=mag[newaxis,:,newaxis]
>>     distance=distance[:,:,newaxis]
       
>>     d1,d2,d3,f1,f2,e1,e2=sigma_coefficient
>>     log_sigma_aleatory1=(mag<=5)*(d1)
>>     log_sigma_aleatory1+=(5<mag)*(mag<=5.5)*(d1+(d2-d1)*(mag-5)/0.5)
>>     log_sigma_aleatory1+=(5.5<mag)*(mag<=8)*(d2+(d3-d2)*(mag-5.5)/2.5)
>>     log_sigma_aleatory1+=(8<mag)*(d3)
       # getting the aleatory (mag part) sigma
>>     log_sigma_aleatory2=(distance<=5)*(f1)
>>     log_sigma_aleatory2+=(5<distance)*(distance<=20)*(f1+(f2-f1)*(distance-5)/15)
>>     log_sigma_aleatory2+=(20<distance)*f2
       # getting the aleatory (distance part) sigma
       ##log_epistemic=e1+e2*(mag-6)
       # getting model uncertainty
       ###log_sigma=sqrt(log_epistemic**2+log_sigma_aleatory1**2\
       ###               +log_sigma_aleatory2**2)
>>     log_sigma=sqrt(log_sigma_aleatory1**2+
>>                    log_sigma_aleatory2**2)
       
>>     return log_mean,log_sigma
   
!> Toro_1997_midcontinent_magnitude_type='Mw'
!> Toro_1997_midcontinent_distance_type='Joyner_Boore'
   
!> Toro_1997_midcontinent_interpolation=linear_interpolation
!> Toro_1997_midcontinent_sigma_coefficient_interpolation=linear_interpolation
   
!> Toro_1997_midcontinent_test_distance=array([[17.004,187.14],
!>                                             [1.5291,168.8]])
   # temp - CHANGED 6.69 to 4.59...
!> Toro_1997_midcontinent_test_magnitude=array([6.59694563,4.78866307])
   
!> Toro_1997_midcontinent_test_period=array([0.0,1.0])
!> Toro_1997_midcontinent_test_mean=array([[[ 0.32568276,  0.16652828],
!>                                          [ 0.00317764,  0.00110675]],
!>                                         [[ 0.83083585,  0.40776479],
!>                                          [ 0.00372073,  0.00121415]]])
   
   # temp - CHANGED 6.69 to 4.59...
   #I get:
   #[[[ 0.0644522   0.00704784]
   #  [ 0.00317764  0.00110675]]
   # [[ 0.16442134  0.0172575 ]
   #  [ 0.00372073  0.00121415]]]
   #XLS gets:
   #[[[0.06445220  0.00704784]
   #  [0.00276765  0.00066167]]
   # [[0.16442134  0.01725750]
   #  [0.00331483  0.00078984]]]
   
   # temp - CHANGED 6.69 to 2.59...
   #I get:
   #[[[  1.27550056e-02   6.02217426e-05]
   # [[  3.25387683e-02   1.47460272e-04]
   #XLS gets:
   #[[[0.01275501  0.00006022]
   # [[0.03253877  0.00014746]
   
   # temp - CHANGED 6.69 to 0.59...
   #I get:
   #[[[  2.52419901e-03   1.03891309e-07]
   # [[  6.43937992e-03   2.54390524e-07]
   #XLS gets:
   #[[[2.524199E-03  1.038913E-07]
   # [[6.439380E-03  2.543905E-07]
   
   
   # In other words, I am accurate for low distances, but not high ones.
   
   
   # Note:
   # for ground motions:
   #   period0,period1
   # [[[m0s0p0,m0s0p1]   magnitude0  site0
   #   [m1s0p0,m1s0p1]]  magnitude1  site0
   #  [[m0s1p0,m1s1p1]   magnitude0  site1
   #   [m1s1p0,m1s1p1]]] magnitude1  site1
   
   # for distances:
   # event0 event1
   # [[] ,   [], site0
   #  [] ,   []] site1
   
   # I get:
   # [[[ 0.32568276  0.16652828]
   #   [ 0.00317764  0.00110675]]
   #  [[ 0.83083585  0.40776479]
   #   [ 0.00372073  0.00121415]]]
   
   
   # Matlab gets:
   #[[[  3.37250000e-01   1.75160000e-01]
   #  [  2.53560000e-03   6.40940000e-04]]
   #
   # [[  8.60320000e-01   4.28880000e-01]
   #  [  2.96880000e-03   7.03120000e-04]]]
   
   # IASPIE - Campbell Workbook.xls gets:
   #[[[0.32568276  0.16652828]
   #  [0.00276765  0.00066167]]
   # [[0.83083586  0.40776479]
   #  [0.00331483  0.00078984]]]
   
   #Changed XLS: No change
   #[[[0.32568276    0.16652828]
   #  [2.767647E-03  6.616664E-04]]
   # [[0.83083586    0.40776479]
   #  [3.314829E-03  7.898408E-04]]]
   
!> Toro_1997_midcontinent_args=[
!>     Toro_1997_midcontinent_distribution,
!>     Toro_1997_midcontinent_magnitude_type,
!>     Toro_1997_midcontinent_distance_type,
       
!>     Toro_1997_midcontinent_coefficient,
!>     Toro_1997_midcontinent_coefficient_period,
!>     Toro_1997_midcontinent_interpolation,
       
!>     Toro_1997_midcontinent_sigma_coefficient,
!>     Toro_1997_midcontinent_coefficient_period,
!>     Toro_1997_midcontinent_sigma_coefficient_interpolation,
       
!>     Toro_1997_midcontinent_test_distance,
!>     Toro_1997_midcontinent_test_magnitude,
!>     Toro_1997_midcontinent_test_period,
!>     Toro_1997_midcontinent_test_mean[:]]
   
!> Toro_1997_midcontinent=Attenuation_model(*Toro_1997_midcontinent_args)
   # put all the arguments into Attenuation_model
   
!> AllenSEA06_coefficient_period=(
!>     array([  0.     ,   0.025  ,   0.03148,   0.03964,   0.0499 ,   0.06285,
!>              0.07911,   0.0996 ,   0.1255 ,   0.158  ,   0.1988 ,   0.2506 ,
!>              0.3155 ,   0.3968 ,   0.5    ,   0.6289 ,   0.7937 ,   1.     ,
!>              1.25   ,   1.587  ,   2.     ,   2.5    ,   3.125  ,   4.     ,
!>              5.     ,   6.25   ,   7.692  ,  10.     ]))
   
!> AllenSEA06_coefficient=(
!>     array([[-1.301  , -0.7679 , -0.632  , -0.5447 , -0.5376 , -0.6008 ,
!>             -0.7511 , -0.9949 , -1.361  , -1.92   , -2.496  , -3.17   ,
!>             -3.918  , -4.615  , -5.286  , -5.868  , -6.344  , -6.644  ,
!>             -6.845  , -6.89   , -6.809  , -6.61   , -6.38   , -6.143  ,
!>             -5.93   , -5.767  , -5.704  , -5.723  ],
!>            [ 1.076  ,  0.9752 ,  0.9465 ,  0.9274 ,  0.9256 ,  0.9415 ,
!>              0.975  ,  1.04   ,  1.134  ,  1.278  ,  1.427  ,  1.603  ,
!>              1.789  ,  1.956  ,  2.108  ,  2.223  ,  2.293  ,  2.307  ,
!>              2.281  ,  2.2    ,  2.078  ,  1.914  ,  1.742  ,  1.572  ,
!>              1.413  ,  1.279  ,  1.183  ,  1.118  ],
!>            [-0.07192, -0.06487, -0.06227, -0.0603 , -0.05961, -0.06025,
!>             -0.0621 , -0.06684, -0.07361, -0.08364, -0.09446, -0.1076 ,
!>             -0.1206 , -0.1323 , -0.1425 , -0.1498 , -0.1528 , -0.1516 ,
!>             -0.1465 , -0.1368 , -0.1243 , -0.1081 , -0.09157, -0.07562,
!>             -0.06099, -0.04897, -0.04048, -0.03476],
!>            [-1.683  , -1.772  , -1.748  , -1.704  , -1.643  , -1.583  ,
!>             -1.517  , -1.472  , -1.422  , -1.329  , -1.278  , -1.241  ,
!>             -1.186  , -1.161  , -1.147  , -1.157  , -1.171  , -1.216  ,
!>             -1.251  , -1.307  , -1.375  , -1.436  , -1.494  , -1.546  ,
!>             -1.591  , -1.632  , -1.657  , -1.669  ],
!>            [ 0.1527 ,  0.1575 ,  0.1523 ,  0.146  ,  0.1392 ,  0.1329 ,
!>              0.1274 ,  0.1248 ,  0.1222 ,  0.1134 ,  0.1114 ,  0.1111 ,
!>              0.1069 ,  0.1066 ,  0.1078 ,  0.1134 ,  0.1184 ,  0.1273 ,
!>              0.1339 ,  0.144  ,  0.1563 ,  0.1662 ,  0.1753 ,  0.1834 ,
!>          0.1901 ,  0.1962 ,  0.1991 ,  0.1997 ],
!>            [-3.452  , -3.619  , -3.788  , -4.014  , -4.267  , -4.379  ,
!>             -4.327  , -4.104  , -3.671  , -3.185  , -2.709  , -2.348  ,
!>             -2.083  , -1.869  , -1.76   , -1.597  , -1.489  , -1.478  ,
!>             -1.547  , -1.458  , -1.507  , -1.537  , -1.606  , -1.731  ,
!>         -1.837  , -1.913  , -1.99   , -2.034  ],
!>            [ 0.3054 ,  0.3251 ,  0.3455 ,  0.3705 ,  0.3958 ,  0.3967 ,
!>              0.3733 ,  0.3283 ,  0.2611 ,  0.1947 ,  0.1444 ,  0.1167 ,
!>              0.1008 ,  0.09321,  0.09447,  0.08727,  0.08609,  0.09615,
!>              0.1196 ,  0.1111 ,  0.1249 ,  0.1372 ,  0.1507 ,  0.1743 ,
!>              0.191  ,  0.2028 ,  0.2138 ,  0.2192 ],
!>            [ 1.24   ,  1.179  ,  1.218  ,  1.278  ,  1.332  ,  1.454  ,
!>              1.515  ,  1.449  ,  1.508  ,  1.432  ,  1.448  ,  1.583  ,
!>              1.747  ,  1.88   ,  1.812  ,  1.766  ,  1.753  ,  1.737  ,
!>              1.718  ,  1.747  ,  1.691  ,  1.66   ,  1.599  ,  1.53   ,
!>              1.482  ,  1.428  ,  1.39   ,  1.352  ],
!>            [-0.1626 , -0.1686 , -0.1779 , -0.184  , -0.1901 , -0.2007 ,
!>             -0.2082 , -0.1913 , -0.1958 , -0.1728 , -0.1714 , -0.1895 ,
!>             -0.2109 , -0.2283 , -0.2172 , -0.2065 , -0.1999 , -0.1942 ,
!>             -0.1925 , -0.1999 , -0.1902 , -0.1847 , -0.1754 , -0.1642 ,
!>             -0.1573 , -0.1488 , -0.1431 , -0.1369 ],
!>            [ 0.5773 ,  0.6028 ,  0.6021 ,  0.5876 ,  0.5901 ,  0.5618 ,
!>              0.5709 ,  0.5562 ,  0.5431 ,  0.5002 ,  0.5008 ,  0.5007 ,
!>              0.5125 ,  0.5222 ,  0.522  ,  0.5208 ,  0.5151 ,  0.5182 ,
!>              0.5419 ,  0.5756 ,  0.5948 ,  0.6098 ,  0.6183 ,  0.6111 ,
!>              0.6098 ,  0.6037 ,  0.5982 ,  0.5867 ],
!>            [ 0.8436 ,  0.9009 ,  0.9401 ,  0.9771 ,  0.9718 ,  0.9878 ,
!>              0.9411 ,  0.9286 ,  0.9016 ,  0.9215 ,  0.8754 ,  0.8358 ,
!>              0.7731 ,  0.7176 ,  0.6997 ,  0.6864 ,  0.6771 ,  0.6535 ,
!>              0.6062 ,  0.5314 ,  0.4867 ,  0.4527 ,  0.4353 ,  0.4515 ,
!>              0.4565 ,  0.4692 ,  0.4809 ,  0.503  ],
!>            [-0.9537 , -1.001  , -1.024  , -1.039  , -1.034  , -1.038  ,
!>             -1.013  , -1.009  , -0.9894 , -0.9977 , -0.9647 , -0.9351 ,
!>             -0.8892 , -0.8454 , -0.8345 , -0.8208 , -0.8062 , -0.7894 ,
!>             -0.7615 , -0.7143 , -0.6838 , -0.6594 , -0.6494 , -0.6595 ,
!>         -0.6649 , -0.6734 , -0.681  , -0.6946 ],
!>            [ 0.1708 ,  0.1759 ,  0.1773 ,  0.1774 ,  0.1763 ,  0.1779 ,
!>              0.1763 ,  0.1793 ,  0.1784 ,  0.1834 ,  0.1788 ,  0.1743 ,
!>              0.1661 ,  0.1574 ,  0.1565 ,  0.1534 ,  0.1494 ,  0.1468 ,
!>              0.1417 ,  0.1328 ,  0.1265 ,  0.1211 ,  0.1194 ,  0.1212 ,
!>              0.1228 ,  0.1246 ,  0.1261 ,  0.1288 ]]))
   
   
!> AllenSEA06_sigma_coefficient_period=array([
!>     10.   ,   5.    ,   3.003 ,   2.    ,   1.6   ,   1.    ,
!>     0.7502,   0.5   ,   0.4   ,   0.3   ,   0.24  ,   0.2   ,
!>     0.16  ,   0.15  ,   0.12  ,   0.1   ,   0.08  ,   0.07  ,
!>     0.06  ,   0.055 ,   0.05  ,   0.04  ,   0.0323,   0.025 ,
!>     0.02  ,   0.01  ])
   
!> model_sigma=array([[
!>     1.2756,  1.1358,  0.9711,  0.8642,  0.7764,  0.6627,  0.6599,
!>     0.5899,  0.5648,  0.557 ,  0.533 ,  0.5208,  0.5101,  0.5114,
!>     0.5184,  0.4997,  0.489 ,  0.4884,  0.4918,  0.4851,  0.4891,
!>     0.4847,  0.4793,  0.4742,  0.4768,  0.4774]])
   
!> regression_sigma=array([[
!>     0.235 ,  0.258 ,  0.2739,  0.2938,  0.3074,  0.3373,  0.3546,
!>     0.3832,  0.4015,  0.4298,  0.456 ,  0.4786,  0.4996,  0.5064,
!>     0.5219,  0.5327,  0.5211,  0.5074,  0.4848,  0.4696,  0.4574,
!>     0.4525,  0.4547,  0.4482,  0.4429,  0.4404]])
   
   
!> AllenSEA06_sigma_coefficient=model_sigma+regression_sigma
   
!> AllenSEA06_magnitude_type='Mw'
!> AllenSEA06_distance_type='Mendez_rupture'
   
!> AllenSEA06_interpolation=linear_interpolation
!> AllenSEA06_sigma_coefficient_interpolation=linear_interpolation
   
!> def AllenSEA06_distribution(mag,distance,coefficient,
!>                             sigma_coefficient,r_z=None):
!>     from scipy import where,sqrt,log10,e
!>     c1,c2,c3,c4,c5,c6,c7,c8,c9,c10,c11,c12,c13=coefficient
       
!>     r0 = 10; # km
!>     r1 = 90;
!>     r2 = 160;
   
!>     log10_dist=log10(distance)
       
       #TA:
       # f0 = max([log10(r0./RrupMatrix) zeros(size(RrupMatrix))]);
   
       # noting that log(a/b) = log(a) - log(b)
!>     f0 = log10(r0) - log10_dist
!>     f0 = where(f0>0,f0,0)
       
       #TA:
       # f1 = min([log10(RrupMatrix) log10(repmat(r1,size(RrupMatrix)))]);
!>     f1 = log10_dist
!>     f1 = where(f1>log10(r1),log10(r1),f1)
   
       #TA:
       # f2 = max([log10(RrupMatrix./r2) zeros(size(RrupMatrix))]);
!>     f2 = log10_dist - log10(r2)
!>     f2 = where(f2>0,f2,0)
   
       #TA:
       # D = (c10 + c11.*log10(RrupMatrix) + c12.*log10(RrupMatrix).^2
       #     + c13.*log10(RrupMatrix).^3);
!>     D=(c10+c11*log10_dist+c12*(log10_dist**2)+c13*(log10_dist**3));
   
       # TA:
       # lnSA = log(10.^(c1 + c2.*MagMatrix + c3.*MagMatrix.^2 +
       # (c4 + c5.*MagMatrix).*f1 ...
       # + (c6 + c7.*MagMatrix).*f2 + (c8 + c9.*MagMatrix).*f0 + D)/980);
   
       # Noting that log_e(10**x)=log10(10**x)/log10(e)=x/log10(e)
   
       # or log_e(10**x/y)=log10(10**x/y)/log10(e)=(x-log10(y))/log10(e)
!>     log_mean = ((c1+c2*mag+c3*(mag**2)+(c4+c5*mag)*f1+
!>                 (c6+c7*mag)*f2+(c8+c9*mag)*f0+D)-log10(980))/log10(e)
   
!>     log_sigma=sigma_coefficient[0]
!>     return log_mean,log_sigma
   
!> AllenSEA06_test_period=(
!>     array([0.0000E+00,2.5000E-02,3.1500E-02,3.9600E-02,4.9900E-02,6.2900E-02,
!>            7.9100E-02,9.9600E-02,1.2550E-01,1.5800E-01,1.9880E-01,2.5060E-01,
!>            3.1550E-01,3.9680E-01,5.0000E-01,6.2890E-01,7.9370E-01,1.0000E+00,
!>            1.2500E+00,1.5870E+00,2.0000E+00,2.5000E+00,3.1250E+00,4.0000E+00,
!>            5.0000E+00,6.2500E+00,7.6920E+00,1.0000E+01]))
   
!> AllenSEA06_test_distance=(
!>     array([9,14,21.0]))
   
!> AllenSEA06_test_mean=(
!>     array([[1.9085E-01,2.8322E-01,3.3223E-01,3.8110E-01,
!>             4.2045E-01,4.3670E-01,4.3483E-01,4.1459E-01,
!>             3.7654E-01,3.3145E-01,2.8550E-01,2.3414E-01,
!>             1.8471E-01,1.3908E-01,1.0155E-01,7.0559E-02,
!>             4.6963E-02,3.0169E-02,1.9345E-02,1.2098E-02,
!>             7.3549E-03,4.4177E-03,2.6241E-03,1.5683E-03,
!>             9.2787E-04,5.6127E-04,3.4052E-04,2.0889E-04],
!>            [9.6752E-02,1.3946E-01,1.6316E-01,1.8794E-01,
!>             2.0926E-01,2.1961E-01,2.2178E-01,2.1435E-01,
!>             1.9805E-01,1.7847E-01,1.5664E-01,1.3041E-01,
!>             1.0413E-01,7.9163E-02,5.8426E-02,4.1004E-02,
!>             2.7482E-02,1.7674E-02,1.1320E-02,7.0665E-03,
!>             4.2918E-03,2.5689E-03,1.5203E-03,9.0654E-04,
!>             5.3461E-04,3.2263E-04,1.9514E-04,1.1944E-04],
!>            [5.0838E-02,7.0389E-02,8.1847E-02,9.4674E-02,
!>             1.0654E-01,1.1362E-01,1.1680E-01,1.1483E-01,
!>             1.0841E-01,1.0042E-01,9.0105E-02,7.6499E-02,
!>             6.2215E-02,4.7997E-02,3.5791E-02,2.5390E-02,
!>             1.7166E-02,1.1080E-02,7.0935E-03,4.4272E-03,
!>             2.6890E-03,1.6056E-03,9.4663E-04,5.6245E-04,
!>             3.3037E-04,1.9872E-04,1.1973E-04,7.3048E-05]]))
!> AllenSEA06_test_mean=AllenSEA06_test_mean[:,newaxis,:]
!> AllenSEA06_test_magnitude=array([5.4])
   
!> AllenSEA06_args=[
!>     AllenSEA06_distribution,
!>     AllenSEA06_magnitude_type,
!>     AllenSEA06_distance_type,
       
!>     AllenSEA06_coefficient,
!>     AllenSEA06_coefficient_period,
!>     AllenSEA06_interpolation,
       
!>     AllenSEA06_sigma_coefficient,
!>     AllenSEA06_sigma_coefficient_period,
!>     AllenSEA06_sigma_coefficient_interpolation,
       
!>     AllenSEA06_test_distance,
!>     AllenSEA06_test_magnitude,
!>     AllenSEA06_test_period,
!>     AllenSEA06_test_mean]
   
!> AllenSEA06=Attenuation_model(*AllenSEA06_args)
   
   
   
!> Atkinson_Boore_97_coefficient=array(
!>     [[  1.84100000e+00,   2.76200000e+00,   2.46300000e+00,
!>         2.30100000e+00,   2.14000000e+00,   1.74900000e+00,
!>         1.26500000e+00,   6.20000000e-01,  -9.40000000e-02,
!>         -5.08000000e-01,  -9.00000000e-01,  -1.66000000e+00],
!>      [  6.86000000e-01,   7.55000000e-01,   7.97000000e-01,
!>         8.29000000e-01,   8.64000000e-01,   9.63000000e-01,
!>         1.09400000e+00,   1.26700000e+00,   1.39100000e+00,
!>         1.42800000e+00,   1.46200000e+00,   1.46000000e+00],
!>      [ -1.23000000e-01,  -1.10000000e-01,  -1.13000000e-01,
!>        -1.21000000e-01,  -1.29000000e-01,  -1.48000000e-01,
!>        -1.65000000e-01,  -1.47000000e-01,  -1.18000000e-01,
!>        -9.40000000e-02,  -7.10000000e-02,  -3.90000000e-02],
!>      [ -3.11000000e-03,  -5.20000000e-03,  -3.52000000e-03,
!>        -2.79000000e-03,  -2.07000000e-03,  -1.05000000e-03,
!>        -2.40000000e-04,   0.00000000e+00,   0.00000000e+00,
!>        0.00000000e+00,   0.00000000e+00,   0.00000000e+00]])
   
!> Atkinson_Boore_97_coefficient_period=array(
!>     [  0.00000000e+00,   5.00000000e-02,   7.70000000e-02,
!>        1.00000000e-01,   1.30000000e-01,   2.00000000e-01,
!>        3.10000000e-01,   5.00000000e-01,   7.70000000e-01,
!>        1.00000000e+00,   1.25000000e+00,   2.00000000e+00])
   
!> Atkinson_Boore_97_interpolation=linear_interpolation
   
   
!> Atkinson_Boore_97_sigma_coefficient=array(
!>     [[0.622, 0.622, 0.599, 0.553, 0.553, 0.553]])
   
!> Atkinson_Boore_97_sigma_coefficient_period=array(
!>     [0, 0.10, 0.20, 0.50, 1.00, 100])
   
!> Atkinson_Boore_97_sigma_coefficient_interpolation=linear_interpolation
   
!> def Atkinson_Boore_97_distribution_python(mag,distance,coefficient,
!>                                    sigma_coefficient,r_z=None):
!!     from scipy import log
!!     c1,c2,c3,c4=coefficient
!!     log_mean = c1+c2*(mag-6)+c3*(mag-6)**2-log(distance)+c4*distance         
!!     log_sigma=sigma_coefficient[0]
!!     return log_mean,log_sigma
   
!> def Atkinson_Boore_97_distribution(mag,distance,coefficient,
!>                              sigma_coefficient,r_z=None):
>!     from scipy import weave
>!     from scipy.weave import converters
>!     from scipy import zeros
       
>!     num_sites,num_events=distance.shape[0:2]
>!     num_periods=coefficient.shape[3]
>!     assert coefficient.shape==(4,1,1,num_periods)
>!     assert sigma_coefficient.shape==(1,1,1,num_periods)
>!     assert mag.shape==(1,num_events,1)
>!     assert distance.shape==(num_sites,num_events,1)
>!     log_mean=zeros((num_sites,num_events,num_periods),dtype=float)
>!     log_sigma=zeros((num_sites,num_events,num_periods),dtype=float)
   
>!     coefficient=coefficient[:,0,0,:]
>!     sigma_coefficient=sigma_coefficient[0,0,0,:]
>!     mag=mag[0,:,0]
>!     distance=distance[:,:,0]
>!     code="""
>!     double c1,c2,c3,c4;
>!     double s;
>!     double m,d;
>!     for (int i=0; i<num_sites; ++i){
>!         for (int j=0; j<num_events; ++j){
>!             m=mag(j);
>!             d=distance(i,j);
>!             for (int k=0;k<num_periods;++k){
>!                 c1=coefficient(0,k);
>!                 c2=coefficient(1,k);
>!                 c3=coefficient(2,k);
>!                 c4=coefficient(3,k);
                   
>!                 log_mean(i,j,k) = c1+c2*(m-6)+(c3*(m-6)*(m-6))-log(d)+c4*d;
                   
>!                 s=sigma_coefficient(k);
>!                 log_sigma(i,j,k)=s;                
>!             }       
>!         }
>!     }
>!     return_val = 0;
>!     """
   
>!     weave.inline(code,
>!                 ['num_sites','num_events','num_periods',
>!                  'coefficient','sigma_coefficient',
>!                  'mag','log_mean','distance','log_sigma'],
>!                  type_converters=converters.blitz,
>!                  compiler='gcc')    
>!     return log_mean,log_sigma
!> Atkinson_Boore_97_distance_type='Rupture'
!> Atkinson_Boore_97_magnitude_type='Mw'
   
!> Atkinson_Boore_97_args=[
!>     Atkinson_Boore_97_distribution,
!>     Atkinson_Boore_97_magnitude_type,
!>     Atkinson_Boore_97_distance_type,
       
!>     Atkinson_Boore_97_coefficient,
!>     Atkinson_Boore_97_coefficient_period,
!>     Atkinson_Boore_97_interpolation,
       
!>     Atkinson_Boore_97_sigma_coefficient,
!>     Atkinson_Boore_97_sigma_coefficient_period,
!>     Atkinson_Boore_97_sigma_coefficient_interpolation,
       
!>     AllenSEA06_test_distance,
!>     AllenSEA06_test_magnitude,
!>     AllenSEA06_test_period,
!>     AllenSEA06_test_mean]
   
!> Atkinson_Boore_97=Attenuation_model(*Atkinson_Boore_97_args)
   
   
   
!> Sadigh_97_coefficient_less65=(
!>       [[  1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01],
!>        [ -6.24000000e-01,  -9.00000000e-02,   1.10000000e-01,
!>           2.12000000e-01,   2.75000000e-01,   3.48000000e-01,
!>           3.07000000e-01,   2.85000000e-01,   2.39000000e-01,
!>           1.53000000e-01,   6.00000000e-02,  -5.70000000e-02,
!>          -2.98000000e-01,  -5.88000000e-01,  -1.20800000e+00,
!>          -1.70500000e+00,  -2.40700000e+00,  -2.94500000e+00,
!>          -3.70000000e+00,  -4.23000000e+00,  -4.71400000e+00,
!>          -5.53000000e+00],
!>        [  1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
!>           1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
!>           1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
!>           1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
!>           1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
!>           1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
!>           1.00000000e+00,   1.00000000e+00,   1.00000000e+00,
!>           1.00000000e+00],
!>        [  0.00000000e+00,   6.00000000e-03,   6.00000000e-03,
!>           6.00000000e-03,   6.00000000e-03,   5.00000000e-03,
!>           4.00000000e-03,   2.00000000e-03,   0.00000000e+00,
!>          -4.00000000e-03,  -1.10000000e-02,  -1.70000000e-02,
!>          -2.80000000e-02,  -4.00000000e-02,  -5.00000000e-02,
!>          -5.50000000e-02,  -6.50000000e-02,  -7.00000000e-02,
!>          -8.00000000e-02,  -1.00000000e-01,  -1.00000000e-01,
!>          -1.10000000e-01],
!>        [ -2.10000000e+00,  -2.12800000e+00,  -2.12800000e+00,
!>          -2.14000000e+00,  -2.14800000e+00,  -2.16200000e+00,
!>          -2.14400000e+00,  -2.13000000e+00,  -2.11000000e+00,
!>          -2.08000000e+00,  -2.05300000e+00,  -2.02800000e+00,
!>          -1.99000000e+00,  -1.94500000e+00,  -1.86500000e+00,
!>          -1.80000000e+00,  -1.72500000e+00,  -1.67000000e+00,
!>          -1.61000000e+00,  -1.57000000e+00,  -1.54000000e+00,
!>          -1.51000000e+00],
!>        [  0.00000000e+00,  -8.20000000e-02,  -8.20000000e-02,
!>          -5.20000000e-02,  -4.10000000e-02,  -1.40000000e-02,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00],
!>        [  3.65640000e+00,   3.65640000e+00,   3.65640000e+00,
!>           3.65640000e+00,   3.65640000e+00,   3.65640000e+00,
!>           3.65640000e+00,   3.65640000e+00,   3.65640000e+00,
!>           3.65640000e+00,   3.65640000e+00,   3.65640000e+00,
!>           3.65640000e+00,   3.65640000e+00,   3.65640000e+00,
!>           3.65640000e+00,   3.65640000e+00,   3.65640000e+00,
!>           3.65640000e+00,   3.65640000e+00,   3.65640000e+00,
!>           3.65640000e+00],
!>        [  2.50000000e-01,   2.50000000e-01,   2.50000000e-01,
!>           2.50000000e-01,   2.50000000e-01,   2.50000000e-01,
!>           2.50000000e-01,   2.50000000e-01,   2.50000000e-01,
!>           2.50000000e-01,   2.50000000e-01,   2.50000000e-01,
!>           2.50000000e-01,   2.50000000e-01,   2.50000000e-01,
!>           2.50000000e-01,   2.50000000e-01,   2.50000000e-01,
!>           2.50000000e-01,   2.50000000e-01,   2.50000000e-01,
!>           2.50000000e-01]])
!> Sadigh_97_coefficient_more65=(
!>       [[  1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01,   1.82000000e-01,   1.82000000e-01,
!>           1.82000000e-01],
!>        [ -1.27400000e+00,  -7.40000000e-01,  -5.40000000e-01,
!>          -4.38000000e-01,  -3.75000000e-01,  -3.02000000e-01,
!>          -3.43000000e-01,  -3.65000000e-01,  -4.11000000e-01,
!>          -4.97000000e-01,  -5.90000000e-01,  -7.07000000e-01,
!>          -9.48000000e-01,  -1.23800000e+00,  -1.85800000e+00,
!>          -2.35500000e+00,  -3.05700000e+00,  -3.59500000e+00,
!>          -4.35000000e+00,  -4.88000000e+00,  -5.36400000e+00,
!>          -6.18000000e+00],
!>        [  1.10000000e+00,   1.10000000e+00,   1.10000000e+00,
!>           1.10000000e+00,   1.10000000e+00,   1.10000000e+00,
!>           1.10000000e+00,   1.10000000e+00,   1.10000000e+00,
!>           1.10000000e+00,   1.10000000e+00,   1.10000000e+00,
!>           1.10000000e+00,   1.10000000e+00,   1.10000000e+00,
!>           1.10000000e+00,   1.10000000e+00,   1.10000000e+00,
!>           1.10000000e+00,   1.10000000e+00,   1.10000000e+00,
!>           1.10000000e+00],
!>        [  0.00000000e+00,   6.00000000e-03,   6.00000000e-03,
!>           6.00000000e-03,   6.00000000e-03,   5.00000000e-03,
!>           4.00000000e-03,   2.00000000e-03,   0.00000000e+00,
!>          -4.00000000e-03,  -1.10000000e-02,  -1.70000000e-02,
!>          -2.80000000e-02,  -4.00000000e-02,  -5.00000000e-02,
!>          -5.50000000e-02,  -6.50000000e-02,  -7.00000000e-02,
!>          -8.00000000e-02,  -1.00000000e-01,  -1.00000000e-01,
!>          -1.10000000e-01],
!>        [ -2.10000000e+00,  -2.12800000e+00,  -2.12800000e+00,
!>          -2.14000000e+00,  -2.14800000e+00,  -2.16200000e+00,
!>          -2.14400000e+00,  -2.13000000e+00,  -2.11000000e+00,
!>          -2.08000000e+00,  -2.05300000e+00,  -2.02800000e+00,
!>          -1.99000000e+00,  -1.94500000e+00,  -1.86500000e+00,
!>          -1.80000000e+00,  -1.72500000e+00,  -1.67000000e+00,
!>          -1.61000000e+00,  -1.57000000e+00,  -1.54000000e+00,
!>          -1.51000000e+00],
!>        [  0.00000000e+00,  -8.20000000e-02,  -8.20000000e-02,
!>          -5.20000000e-02,  -4.10000000e-02,  -1.40000000e-02,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00,   0.00000000e+00,   0.00000000e+00,
!>           0.00000000e+00],
!>        [  6.16000000e-01,   6.16000000e-01,   6.16000000e-01,
!>           6.16000000e-01,   6.16000000e-01,   6.16000000e-01,
!>           6.16000000e-01,   6.16000000e-01,   6.16000000e-01,
!>           6.16000000e-01,   6.16000000e-01,   6.16000000e-01,
!>           6.16000000e-01,   6.16000000e-01,   6.16000000e-01,
!>           6.16000000e-01,   6.16000000e-01,   6.16000000e-01,
!>           6.16000000e-01,   6.16000000e-01,   6.16000000e-01,
!>           6.16000000e-01],
!>        [  5.24000000e-01,   5.24000000e-01,   5.24000000e-01,
!>           5.24000000e-01,   5.24000000e-01,   5.24000000e-01,
!>           5.24000000e-01,   5.24000000e-01,   5.24000000e-01,
!>           5.24000000e-01,   5.24000000e-01,   5.24000000e-01,
!>           5.24000000e-01,   5.24000000e-01,   5.24000000e-01,
!>           5.24000000e-01,   5.24000000e-01,   5.24000000e-01,
!>           5.24000000e-01,   5.24000000e-01,   5.24000000e-01,
!>           5.24000000e-01]])
!> Sadigh_97_coefficient=Sadigh_97_coefficient_less65+Sadigh_97_coefficient_more65
!> Sadigh_97_coefficient=array(Sadigh_97_coefficient)
   
!> Sadigh_97_coefficient_period=array(
!>        [  0.00000000e+00,   5.00000000e-02,   7.00000000e-02,
!>           9.00000000e-02,   1.00000000e-01,   1.20000000e-01,
!>           1.40000000e-01,   1.50000000e-01,   1.70000000e-01,
!>           2.00000000e-01,   2.40000000e-01,   3.00000000e-01,
!>           4.00000000e-01,   5.00000000e-01,   7.50000000e-01,
!>           1.00000000e+00,   1.50000000e+00,   2.00000000e+00,
!>           3.00000000e+00,   4.00000000e+00,   5.00000000e+00,
!>           7.50000000e+00])
   
!> Sadigh_97_interpolation=linear_interpolation
   
   
!> Sadigh_97_sigma_coefficient=(
!>       [[  1.39000000e+00,   1.39000000e+00,   1.40000000e+00,
!>           1.40000000e+00,   1.41000000e+00,   1.41000000e+00,
!>           1.42000000e+00,   1.42000000e+00,   1.42000000e+00,
!>           1.43000000e+00,   1.44000000e+00,   1.45000000e+00,
!>           1.48000000e+00,   1.50000000e+00,   1.52000000e+00,
!>           1.53000000e+00,   1.53000000e+00,   1.53000000e+00,
!>           1.53000000e+00,   1.53000000e+00,   1.53000000e+00,
!>           1.53000000e+00],
!>        [  1.40000000e-01,   1.40000000e-01,   1.40000000e-01,
!>           1.40000000e-01,   1.40000000e-01,   1.40000000e-01,
!>           1.40000000e-01,   1.40000000e-01,   1.40000000e-01,
!>           1.40000000e-01,   1.40000000e-01,   1.40000000e-01,
!>           1.40000000e-01,   1.40000000e-01,   1.40000000e-01,
!>           1.40000000e-01,   1.40000000e-01,   1.40000000e-01,
!>           1.40000000e-01,   1.40000000e-01,   1.40000000e-01,
!>           1.40000000e-01],
!>        [  3.80000000e-01,   3.80000000e-01,   3.90000000e-01,
!>           3.90000000e-01,   4.00000000e-01,   4.00000000e-01,
!>           4.10000000e-01,   4.10000000e-01,   4.10000000e-01,
!>           4.20000000e-01,   4.30000000e-01,   4.40000000e-01,
!>           4.70000000e-01,   4.90000000e-01,   5.10000000e-01,
!>           5.20000000e-01,   5.20000000e-01,   5.20000000e-01,
!>           5.20000000e-01,   5.20000000e-01,   5.20000000e-01,
!>           5.20000000e-01]])
!> Sadigh_97_sigma_coefficient=array(Sadigh_97_sigma_coefficient)
   
!> Sadigh_97_sigma_coefficient_period=array(
!>        [  0.00000000e+00,   5.00000000e-02,   7.00000000e-02,
!>           9.00000000e-02,   1.00000000e-01,   1.20000000e-01,
!>           1.40000000e-01,   1.50000000e-01,   1.70000000e-01,
!>           2.00000000e-01,   2.40000000e-01,   3.00000000e-01,
!>           4.00000000e-01,   5.00000000e-01,   7.50000000e-01,
!>           1.00000000e+00,   1.50000000e+00,   2.00000000e+00,
!>           3.00000000e+00,   4.00000000e+00,   5.00000000e+00,
!>           7.50000000e+00])
   
!> Sadigh_97_sigma_coefficient_interpolation=linear_interpolation
   
!> def Sadigh_97_distribution_python(mag,distance,coefficient,
!>                            sigma_coefficient,r_z=None):
!>     from scipy import log,where,isfinite
!>     F=1.0
       
       # R = RrupMatrix + c7.*exp(c8.*MagMatrix);
       # lnSA(ind,:) = c1*F + c2 + c3.*MagMatrix + c4.*(8.5-MagMatrix).^(2.5) ...
       #   +c5.*log(R)+ c6.*log(RrupMatrix+2);
       #if not (mag<8.5).all():
       #    raise ValueError('Sadigh 97 is not valid for magnitude > 8.5')
           
!>     c_less65=coefficient[:8]
!>     c_less65=c_less65+mag*0 # expand it to size of mag
       
!>     c_more65=coefficient[8:]
!>     c_more65=c_more65+mag*0 # expand it to size of mag
   
!>     coefficient=where((mag+c_less65*0)>6.5,c_more65,c_less65)
       
!>     c1,c2,c3,c4,c5,c6,c7,c8=coefficient
!>     R = distance + c7*exp(c8*mag)
       
!>     log_mean = (c1*F + c2 + c3*mag + c4*(8.5-mag)**(2.5)
!>                 +c5*log(R)+ c6*log(distance+2))
   
!>     s1,s2,s3=sigma_coefficient          
!>     log_sigma=where((mag+0*s1)>7.21,s3+0*mag,s1-s2*mag)
!>     assert isfinite(log_mean).all()
!>     return log_mean,log_sigma
   
!> def Sadigh_97_distribution(mag,distance,coefficient,
!>                              sigma_coefficient,r_z=None):
!>     """
!>     distance is a 3D array. First D is sites, second dimension is events,
!>     third can only have one value.
!>     """
>>     from scipy import weave
>>     from scipy.weave import converters
>>     from scipy import zeros,isfinite
>>     num_sites,num_events=distance.shape[0:2]
>>     num_periods=coefficient.shape[3]
>>     assert coefficient.shape==(16,1,1,num_periods)
>>     assert sigma_coefficient.shape==(3,1,1,num_periods)
>>     assert mag.shape==(1,num_events,1)
>>     assert distance.shape==(num_sites,num_events,1)
>>     log_mean=zeros((num_sites,num_events,num_periods),dtype=float)
>>     log_sigma=zeros((num_sites,num_events,num_periods),dtype=float)
   
>>     coefficient=coefficient[:,0,0,:]
>>     sigma_coefficient=sigma_coefficient[:,0,0,:]
>>     mag=mag[0,:,0]
>>     distance=distance[:,:,0]
>>     code="""
>>     double F;
>>     double c1,c2,c3,c4,c5,c6,c7,c8;
>>     double s1,s2,s3;
>>     double m,d;
>>     double R;
>>     F=1.0;
>>     int c_offset;
>>     for (int i=0; i<num_sites; ++i){
>>         for (int j=0; j<num_events; ++j){
>>             m=mag(j);
>>             d=distance(i,j);
               
>>             if (m>6.5){
>>                 c_offset=8;
>>             }
>>             else{
>>                 c_offset=0;
>>             }
>>             for (int k=0;k<num_periods;++k){
>>                 c1=coefficient((0+c_offset),k);
>>                 c2=coefficient((1+c_offset),k);
>>                 c3=coefficient((2+c_offset),k);
>>                 c4=coefficient((3+c_offset),k);
>>                 c5=coefficient((4+c_offset),k);
>>                 c6=coefficient((5+c_offset),k);
>>                 c7=coefficient((6+c_offset),k);
>>                 c8=coefficient((7+c_offset),k);
                   
>>                 R = d + c7*exp(c8*m);
>>                 log_mean(i,j,k) = c1*F + c2 + c3*m+ c4*pow((8.5-m),2.5)
>>                                   +c5*log(R)+ c6*log(d+2.0);
>>                 s1=sigma_coefficient(0,k);
>>                 s2=sigma_coefficient(1,k);
>>                 s3=sigma_coefficient(2,k);
                   
>>                 if (m>7.21){
>>                     log_sigma(i,j,k)=s3;
>>                 }
>>                 else{
>>                     log_sigma(i,j,k)=s1-s2*m;
>>                 }
>>             }       
>>         }
>>     }
>>     return_val = 0;
>>     """
   
>>     weave.inline(code,
>>                 ['num_sites','num_events','num_periods',
>>                  'coefficient','sigma_coefficient',
>>                  'mag','log_mean','distance','log_sigma'],
>>                  type_converters=converters.blitz,
>>                  compiler='gcc')
>>     assert isfinite(log_mean).all()
>>     return log_mean,log_sigma
   
!> Sadigh_97_distance_type='Rupture'
!> Sadigh_97_magnitude_type='Mw'
   
!> Sadigh_97_test_period=(
!>     array([0.0000E+00,7.0000E-02,1.0000E-01,2.0000E-01,
!>            3.0000E-01,4.0000E-01,5.0000E-01,7.5000E-01,
!>            1.0000E-00,1.5000E-00,2.0000E-00,3.0000E-00]))
             
   
   
!> Sadigh_97_test_distance=(
!>     array([[10.0,25.0,50.0],[50.0,25.0,10.0]]))
         
   
!> Sadigh_97_test_mean=(
!>     array([[[2.6847E-01,4.4170E-01,5.4026E-01,5.9924E-01,
!>             5.0643E-01,4.0426E-01,3.1130E-01,1.9711E-01,
!>             1.4119E-01,8.1022E-02,5.3910E-02,2.7935E-02],
!>            [1.0433E-01,1.5859E-01,1.9874E-01,2.3497E-01,
!>             2.0328E-01,1.6507E-01,1.2971E-01,8.5142E-02,
!>             6.2797E-02,3.7274E-02,2.5423E-02,1.3534E-02],
!>            [8.7664E-02,1.1904E-01,1.5147E-01,2.0553E-01,
!>             2.0108E-01,1.8055E-01,1.5865E-01,1.1717E-01,
!>             9.3009E-02,6.1934E-02,4.5201E-02,2.6760E-02]],
!>            [[3.8676E-02,5.4983E-02,7.0113E-02,8.7934E-02,
!>             7.7967E-02,6.4458E-02,5.1740E-02,3.5270E-02,
!>             2.6825E-02,1.6497E-02,1.1548E-02,6.3250E-03],
!>            [1.0433E-01,1.5859E-01,1.9874E-01,2.3497E-01,
!>             2.0328E-01,1.6507E-01,1.2971E-01,8.5142E-02,
!>             6.2797E-02,3.7274E-02,2.5423E-02,1.3534E-02],
!>            [4.4690E-01,6.9942E-01,8.5110E-01,1.03165E-00,
!>             9.6938E-01,8.4513E-01,7.1715E-01,4.9777E-01,
!>             3.7571E-01,2.3605E-01,1.6508E-01,9.3287E-02]]]))
       
!> Sadigh_97_test_magnitude=array([6.0,6.0,7.0])
   
!> Sadigh_97_args=[
!>     Sadigh_97_distribution,
!>     Sadigh_97_magnitude_type,
!>     Sadigh_97_distance_type,
       
!>     Sadigh_97_coefficient,
!>     Sadigh_97_coefficient_period,
!>     Sadigh_97_interpolation,
       
!>     Sadigh_97_sigma_coefficient,
!>     Sadigh_97_sigma_coefficient_period,
!>     Sadigh_97_sigma_coefficient_interpolation,
       
!>     Sadigh_97_test_distance,
!>     Sadigh_97_test_magnitude,
!>     Sadigh_97_test_period,
!>     Sadigh_97_test_mean]
   
!> Sadigh_97=Attenuation_model(*Sadigh_97_args)
   
   #Youngs et al 1997 attenuation model jgriffin 28/06/07
!> Youngs_97_coefficient=(
!>       [[  0.00000000e+00,   1.27500000e+00,   1.18800000e+00,
!>           7.22000000e-01,   2.46000000e-01,  -1.15000000e-01,
!>          -4.00000000e-01,  -1.14900000e+00,  -1.73600000e+00,
!>          -2.63400000e+00,  -3.32800000e+00,  -4.51100000e+00],
!>        [  0.00000000e-00,   0.00000000e-00,  -1.10000000e-03,
!>          -2.70000000e-03,  -3.60000000e-03,  -4.30000000e-03,
!>          -4.80000000e-03,  -5.70000000e-03,  -6.40000000e-03,
!>          -7.30000000e-03,  -8.00000000e-03,  -8.90000000e-03],
!>        [ -2.55200000e-00,  -2.70700000e-00,  -2.65500000e-00,
!>          -2.52800000e-00,  -2.45400000e-00,  -2.40100000e-00,
!>          -2.36000000e-00,  -2.28600000e-00,  -2.234000000e-00,
!>          -2.16000000e-00,  -2.10700000e-00,  -2.03300000e-00]])
   
!> Youngs_97_coefficient=array(Youngs_97_coefficient)
   
!> Youngs_97_sigma_coefficient=array(
!>       [[  1.45000000e+00,   1.45000000e+00,   1.45000000e+00,
!>           1.45000000e+00,   1.45000000e+00,   1.45000000e+00,
!>           1.45000000e+00,   1.45000000e+00,   1.45000000e+00,
!>           1.50000000e+00,   1.55000000e+00,   1.65000000e+00,
!>           ],
!>        [ -1.00000000e-01,  -1.00000000e-01,  -1.00000000e-01,
!>          -1.00000000e-01,  -1.00000000e-01,  -1.00000000e-01,
!>          -1.00000000e-01,  -1.00000000e-01,  -1.00000000e-01,
!>          -1.00000000e-01,  -1.00000000e-01,  -1.00000000e-01,
!>           ]])
   
   
   
!> Youngs_97_interpolation=linear_interpolation
   
!> Youngs_97_coefficient_period=array(
!>        [  0.00000000e+00,   7.50000000e-02,   1.00000000e-01,
!>           2.00000000e-01,   3.00000000e-01,   4.00000000e-01,
!>           5.00000000e-01,   7.50000000e-01,   1.00000000e+00,
!>           1.50000000e+00,   2.00000000e+00,   3.00000000e+00,])
   
!> Youngs_97_sigma_coefficient_period=array(
!>        [  0.00000000e+00,   7.50000000e-02,   1.00000000e-01,
!>           2.00000000e-01,   3.00000000e-01,   4.00000000e-01,
!>           5.00000000e-01,   7.50000000e-01,   1.00000000e+00,
!>           1.50000000e+00,   2.00000000e+00,   3.00000000e+00,])
   
!> Youngs_97_sigma_coefficient_interpolation=linear_interpolation
   
!> def Youngs_97_distribution_python(mag,distance,coefficient,
!>                            sigma_coefficient,r_z):
!>     from scipy import log,where,isfinite
   
   
!>     c1,c2,c3=coefficient
!>     Z_t=0.0 #for interface earthquakes
       #Z_t=1 #for intraslab earthquakes
   
!>     use_dist=(distance<10)
!>     use_dist=use_dist*1.0
!>     use_dist2=(1-use_dist)
!>     distance=distance*use_dist2+10*use_dist
       #print distance
       #print mag
       #print r_z
       #print Z_t
!>     log_mean=0.2418+1.414*mag+c1+c2*((10.0-mag)**3)+c3*log(distance+1.7818*exp(0.554*mag))+0.00607*r_z+0.3846*Z_t
!>     s1,s2=sigma_coefficient
       #print log_mean
!>     use_m=(mag<8)
!>     use_m=use_m*1.0
!>     use_n=(1-use_m)
!>     log_sigma=s1+s2*mag*use_m+s2*8*use_n #SD uses magnitude=8 for magnitude>8
       #print log_sigma
!>     assert isfinite(log_mean).all()
!>     return log_mean,log_sigma
   
!> Youngs_97_distance_type='Rupture'
!> Youngs_97_magnitude_type='Mw'
   
!> Youngs_97_test_period=(
!>     array([0.0000E+00,7.5000E-02,1.0000E-01,2.0000E-01,
!>            3.0000E-01,4.0000E-01,5.0000E-01,7.5000E-01,
!>            1.0000E-00,1.5000E-00,2.0000E-00,3.0000E-00]))
              
              
   
!> Youngs_97_test_distance=(
!>     array([10.0,25.0,50.0]))
   
!> Youngs_97_test_mean=(
!>     array([[2.1565E-01,3.9499E-01,4.3243E-01,4.3860E-01,
!>             3.6096E-01,3.0698E-01,2.6976E-01,1.6897E-01,
!>             1.1413E-01,6.1594E-02,3.7546E-02,1.5237E-02],
!>            [1.3563E-01,2.4153E-01,2.6693E-01,2.7706E-01,
!>             2.3110E-01,1.9844E-01,1.7568E-01,1.1153E-01,
!>             7.6054E-02,4.1599E-02,2.5603E-02,1.0531E-02],
!>            [7.2680E-02,1.2462E-01,1.3948E-01,1.4934E-01,
!>             1.2684E-01,1.1034E-01,9.8668E-02,6.3782E-02,
!>             4.4050E-02,2.4533E-02,1.5297E-02,6.4070E-03]]))
               
!> Youngs_97_test_mean=Youngs_97_test_mean[:,newaxis,:]
!> Youngs_97_test_magnitude=array([6.5])
!> Youngs_97_test_depth=array([10.0])
   
   
   
   
   
!> Youngs_97_args=[
!>     Youngs_97_distribution_python,
!>     Youngs_97_magnitude_type,
!>     Youngs_97_distance_type,
       
!>     Youngs_97_coefficient,
!>     Youngs_97_coefficient_period,
!>     Youngs_97_interpolation,
       
!>     Youngs_97_sigma_coefficient,
!>     Youngs_97_sigma_coefficient_period,
!>     Youngs_97_sigma_coefficient_interpolation,
       
!>     Youngs_97_test_distance,
!>     Youngs_97_test_magnitude,
!>     Youngs_97_test_period,
!>     Youngs_97_test_mean,
!>     Youngs_97_test_depth]
   
!> Youngs_97=Attenuation_model(*Youngs_97_args)
   
   # concatenate Young (interp to Sadigh periods) and Sadigh)
!> Combo_Sadigh_Youngs_M8_coeff=list(linear_interpolation(Sadigh_97_coefficient_period,Youngs_97_coefficient,Youngs_97_coefficient_period))+list(Sadigh_97_coefficient)
!> Combo_Sadigh_Youngs_M8_coeff=array(Combo_Sadigh_Youngs_M8_coeff)
!> Combo_Sadigh_Youngs_M8_sigma_coeff=list(linear_interpolation(Sadigh_97_sigma_coefficient_period,Youngs_97_sigma_coefficient,Youngs_97_sigma_coefficient_period))+list(Sadigh_97_sigma_coefficient)
!> Combo_Sadigh_Youngs_M8_sigma_coeff=array(Combo_Sadigh_Youngs_M8_sigma_coeff)
   
!> def Combo_Sadigh_Youngs_M8_distribution_python(mag,distance,coefficient,
!>                            sigma_coefficient,r_z):
!>     from scipy import log,where,isfinite
!>     y_coefficient=coefficient[:3]
!>     y_sigma_coefficient=sigma_coefficient[:2]
!>     use_y=(mag>8.0)
!>     use_y=use_y*1.0 # convert from boolean to float
!>     y_log_mean,y_log_sigma=Youngs_97_distribution_python(mag*use_y,distance,y_coefficient,
!>                                                          y_sigma_coefficient,r_z)
       
!>     s_coefficient=coefficient[3:]
!>     s_sigma_coefficient=sigma_coefficient[2:]
!>     use_s=(1-use_y)
!>     s_log_mean,s_log_sigma=Sadigh_97_distribution_python(mag*use_s,distance,s_coefficient,
!>                                                          s_sigma_coefficient,r_z)
   
!>     log_mean=use_y*y_log_mean+use_s*s_log_mean
!>     log_sigma=use_y*y_log_sigma+use_s*s_log_sigma
!>     return log_mean,log_sigma
   
       
       
!> Youngs_97_distance_type='Rupture'
!> Youngs_97_magnitude_type='Mw'
   
!> Combo_Sadigh_Youngs_M8_test_period=(
!>     array([0.0000E+00,7.0000E-02,1.0000E-01,2.0000E-01,
!>            3.0000E-01,4.0000E-01,5.0000E-01,7.5000E-01,
!>            1.0000E-00,1.5000E-00,2.0000E-00,3.0000E-00]))
             
   
   
!> Combo_Sadigh_Youngs_M8_test_distance=(
!>     array([[10.0,25.0,50.0],[50.0,25.0,10.0]]))
         
   
!> Combo_Sadigh_Youngs_M8_test_mean=(
!>     array([[[2.6847E-01,4.4170E-01,5.4026E-01,5.9924E-01,
!>             5.0643E-01,4.0426E-01,3.1130E-01,1.9711E-01,
!>             1.4119E-01,8.1022E-02,5.3910E-02,2.7935E-02],
!>            [1.0433E-01,1.5859E-01,1.9874E-01,2.3497E-01,
!>             2.0328E-01,1.6507E-01,1.2971E-01,8.5142E-02,
!>             6.2797E-02,3.7274E-02,2.5423E-02,1.3534E-02],
!>            [1.8915E-01,2.7467E-01,3.4619E-01,4.4380E-01,
!>             4.1809E-01,3.9259E-01,3.7183E-01,2.6660E-01,
!>             1.9858E-01,1.2267E-01,8.2564E-02,3.8355E-02]],
!>            [[3.8676E-02,5.4983E-02,7.0113E-02,8.7934E-02,
!>             7.7967E-02,6.4458E-02,5.1740E-02,3.5270E-02,
!>             2.6825E-02,1.6497E-02,1.1548E-02,6.3250E-03],
!>            [1.0433E-01,1.5859E-01,1.9874E-01,2.3497E-01,
!>             2.0328E-01,1.6507E-01,1.2971E-01,8.5142E-02,
!>             6.2797E-02,3.7274E-02,2.5423E-02,1.3534E-02],
!>            [2.7888E-01,4.1400E-01,5.1850E-01,6.5197E-01,
!>             6.0732E-01,5.6571E-01,5.3245E-01,3.7749E-01,
!>             2.7896E-01,1.7040E-01,1.1377E-01,5.2258E-02]]]))
       
!> Combo_Sadigh_Youngs_M8_test_magnitude=array([6.0,6.0,8.8])
!> Combo_Sadigh_Youngs_M8_test_depth=array([10.0])
   #Combo_Sadigh_Youngs_M8_test_mean=Combo_Sadigh_Youngs_M8_test_mean[:,newaxis,:]
   
!> Combo_Sadigh_Youngs_M8_args=[
!>     Combo_Sadigh_Youngs_M8_distribution_python,
!>     Youngs_97_magnitude_type,
!>     Youngs_97_distance_type,
       
!>     Combo_Sadigh_Youngs_M8_coeff,
!>     Sadigh_97_coefficient_period,
!>     linear_interpolation,
       
!>     Combo_Sadigh_Youngs_M8_sigma_coeff,
!>     Sadigh_97_sigma_coefficient_period,
!>     linear_interpolation,
       
!>     Combo_Sadigh_Youngs_M8_test_distance,
!>     Combo_Sadigh_Youngs_M8_test_magnitude,
!>     Combo_Sadigh_Youngs_M8_test_period,
!>     Combo_Sadigh_Youngs_M8_test_mean,
!>     Combo_Sadigh_Youngs_M8_test_depth]
   
!> Combo_Sadigh_Youngs_M8=Attenuation_model(*Combo_Sadigh_Youngs_M8_args)
       
   ################
   # END OF MODELS#
   ################
   
!> """No models past this step will be included in the table"""
!> __local_objects = locals().copy() #all the objects in the local namespace
   # Note that this is a copy, otherwise __local_objects would point to itself
   
!> attenuation_models = {}
!> for object_name in __local_objects.keys():
!>     obj=__local_objects[object_name]
       #for all objects in the local namespace
!>     if isinstance(obj,Attenuation_model): #If it's an attenuation_model
!>         if not object_name=='Attenuation_model':
!>             attenuation_models[object_name]=obj
   
   
   
