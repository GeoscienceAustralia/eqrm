>> """
>>  Title: sites.py
    
>>   Author:  Peter Row, peter.row@ga.gov.au
              
>>   Description: Create a data structure to handle site data e.g.
>>   latitude, longitude and other attributes.
    
>>   Version: $Revision: 929 $  
>>   ModifiedBy: $Author: dgray $
>>   ModifiedDate: $Date: 2009-04-08 16:43:41 +1000 (Wed, 08 Apr 2009) $
     
>>   Copyright 2007 by Geoscience Australia
>> """
!> from scipy import array, asarray
   
!> from eqrm_code.distances import Distances   
!> from eqrm_code.csv_interface import csv_to_arrays
!> from eqrm_code.projections import azimuthal_orthographic as projection
   
!> class Sites(object):
!>     """
!>     attributes is a dictionary of the attributes in the site file.
!>     eg.
       
!>     """
!>     def __init__(self,latitude,longitude,**attributes):
>>         self.latitude=asarray(latitude) # A vector of lat's
>>         self.longitude=asarray(longitude)
           
>>         self.attributes=attributes # A dictionary of vectors
           
!>     @classmethod
!>     def from_csv(cls,
!>                  filename,
!>                  **attribute_conversions):
!>         """
!>         Construct Site instance from csv file
!>         use:
           
!>         X = Sites.from_csv('blg_wr.csv',PEOPLE=float,WALLS=str,ROOF_TYPE=str)
!>         """
           
>!         attribute_conversions["LATITUDE"]=float
>!         attribute_conversions["LONGITUDE"]=float               
>!         sites_dict=csv_to_arrays(filename,**attribute_conversions)
           
>!         latitude=sites_dict.pop("LATITUDE")
>!         longitude=sites_dict.pop("LONGITUDE")
           
>!         attributes={}
>!         for attribute_name in sites_dict.keys():
>!             attributes[attribute_name]=sites_dict[attribute_name]
   
>!         sites=cls(latitude,longitude,**attributes)
           
>!         return sites
           
!>     def __len__(self):
>!         return int(self.latitude.shape[0])
   
!>     def __getitem__(self,key):
>!         if isinstance(key,int):
!!             key=[key]
>!         attributes = {}
>!         for k in self.attributes.keys():
>!             attributes[k]=self.attributes[k][key]
>!         return Sites(self.latitude[key],self.longitude[key],**attributes)
   
       #FIXME consider moving to event set
!>     def distances_from_event_set(self,event_set,event_set_trace_starts=True):
!>         """
!>         The distance from self.sites to event_set.centroids.
!>         A big array-like object.
!>         """
   
>>         if event_set_trace_starts:
               
>>             return Distances(self.latitude,
>>                              self.longitude,
>>                              event_set.rupture_centroid_lat,
>>                              event_set.rupture_centroid_lon,
>>                              event_set.length,
>>                              event_set.azimuth,
>>                              event_set.width,
>>                              event_set.dip,
>>                              event_set.depth,
>>                              projection,
>>                              trace_start_lat=event_set.trace_start_lat,
>>                              trace_start_lon=event_set.trace_start_lon,
>>                              trace_start_x=event_set.trace_start_x,
>>                              trace_start_y=event_set.trace_start_y)
!!         else: 
!!             return Distances(self.latitude,
!!                              self.longitude,
!!                              event_set.rupture_centroids_lat,
!!                              event_set.rupture_centroids_lon,
!!                              event_set.lengths,
!!                              event_set.azimuths,
!!                              event_set.widths,
!!                              event_set.dips,
!!                              event_set.depths,
!!                              projection)
   
   
   # this sub-samples sites and is used if small_site_flag>1
!> def truncate_sites_for_test(small_site_flag,sites,
!>                             SiteInd):
       
       # note: sites can be sliced like an array:
       #bad_blg=array([24, 25, 27, 29, 30, 53, 63, 77, 78, 82, 83, 85, 91, 97])-1
       #bad_blg=array([24, 25, 26, 27])-1
       #all_sites=all_sites[bad_blg]
       
>!     if int(small_site_flag)==0:
!!         return sites
>!     elif int(small_site_flag)==1:
>!         site_ind=SiteInd 
!!     elif int(small_site_flag)==2:
!!         site_ind=array([2997, 2657, 3004, 3500])
!!     elif int(small_site_flag)==3:
!!         site_ind=array([        
!!         3541, 3541, 2773, 2773, 4547, 4547, 4080,
!!         5570, 964, 933, 2249, 2249, 2194, 2194,
!!         1766, 2196, 2158, 1674, 2291, 2233, 394,
!!         4982, 5461, 3831, 60, 5966, 2633, 2281,
!!         3059, 1707, 6012, 5284, 1726, 3300, 2979,
!!         2406, 3729, 2353, 2252, 2252, 2342, 2342,
!!         2398, 2187, 4962, 4962, 2219, 2219, 2253,
!!         2367, 5338, 299, 1244, 3571, 1281, 2306,
!!         6238, 2363, 1408, 6284, 6235, 6292, 1750,
!!         1684, 4006, 4135, 1676, 3674, 3875, 17,
!!         6267, 5360, 6268, 6240, 3228, 2383, 468,
!!         71, 2317, 2183, 2694, 5237, 665, 401,
!!         659, 3472, 4126, 2653, 1446, 3845, 1902,
!!         6294, 567, 2222, 4659, 4951, 291, 2372])
!!     else:
!!         raise ValueError
>!     return sites[site_ind-1] # -1 offset to match matlab
       
