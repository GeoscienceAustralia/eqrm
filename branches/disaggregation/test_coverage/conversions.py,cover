>> """Relations between various earthquake parameters - Mw to length, etc.
>>  Title: conversions.py
     
>>   Author:  Peter Row, peter.row@ga.gov.au 
   
>>   Description: Relations between various earthquake parameters - Mw to length,
>>   ML to Mw, etc.
     
   
>>   Version: $Revision: 914 $  
>>   ModifiedBy: $Author: dgray $
>>   ModifiedDate: $Date: 2009-04-01 11:11:47 +1100 (Wed, 01 Apr 2009) $
     
>>   Copyright 2007 by Geoscience Australia
>> """
   
!> from scipy import vectorize, sqrt, sin, minimum, pi, where
   
!> def Johnston_01_ML(Mw):
!>     """
!>     relationship developed by Arch Johnston, 1989
   
!>     coefficients per comms (01)
!>     """
>>     C1=0.473
>>     C2=0.145
>>     C3=3.45
>>     return (C1+(C1**2-4*C2*(C3-Mw))**0.5)/(2*C2)
   
!> def Johnston_89_Mw(ML):
!!     return 3.45-0.473*ML+0.145*(ML**2)
   
!> def Wells_and_Coppersmith_94_length(Mw): 
!!     return 10.**(0.69*Mw - 3.22)
   
!> def modified_Wells_and_Coppersmith_94_area(Mw):
>>     return 10.**(Mw-4.02)
   
!> def modified_Wells_and_Coppersmith_94_width(dip,Mw,area,fault_width=15.0):
       #FIXME(DSG-EQRM) Does it make sence to have a default width value?
       # based on Wells_and_Coppersmith 94 with modification
>>     if Mw > 5.5:
>>         f=sqrt(sqrt(1+2*(Mw-5.5)*sin(dip*pi/180.)))**-1
>>     else: f=1.0
>>     if fault_width is not None:
>>         return minimum(f*sqrt(area),fault_width)
!!     else:
!!         return f*sqrt(area)
   
!> modified_Wells_and_Coppersmith_94_width = vectorize(
!>     modified_Wells_and_Coppersmith_94_width)
   
!> def depth(fault_depth,dip,Mw,fault_width=None):
   
>>     if fault_width is None:
!!         fault_width = 15
>>     rad=pi/180
       
>>     f2=1+((Mw-4.0)/2)
>>     f2=where(f2<1,1,f2)
>>     f2=where(f2>2,2,f2)
   
>>     depth1=fault_depth+f2/3*fault_width*sin(dip*rad)
>>     depth2=fault_depth+fault_width*sin(dip*rad)-0.5*Mw*sin(dip*rad)
>>     depth=where(depth1<depth2,depth1,depth2)
>>     return depth
   ###################
   # END OF FUNCTIONS#
   ###################
   
>> """No functions past this step will be included in the table"""
!> __local_functions = locals().copy() #all the functions in the local namespace
   # Note that this is a copy, otherwise __local_functions would point to itself
   
!> conversion_functions = {}
!> for function_name in __local_functions.keys():
       #for all functions in the local namespace
       
!>     if not function_name.startswith('__'): #If it's not private
!>         function = __local_functions[function_name]
!>         conversion_functions[function_name]=function
