!> from scipy import asarray
   #FIXME - a[(1,2)] != a[[1,2]]
   
   #FIXME(DSG-PR) It's dead code, yeah?
   # What are these used for? What does JIT mean?
   
!> class JIT_array(object):
!>     """
!>     Example 1:
!>         distance=JIT_array(1D_distance_function,
!>                            'JIT_array example at line 5 of jit_array.py'
!>                            events=[(-22),(-28),(-32)],
!>                            sites=[(-25),(-30)])
   
!>         distance.set_slicing(events=(1,),sites=(0,))
           # JIT_array is now set up
   
!>         print distance[i,j]
           # prints: 1D_distance_function(events=events[j],sites=sites[j])
   
!>     Example 2:
!>         ground_motion=JIT_array(ground_motion_function,
!>                                 'JIT_array example at line 17 of jit_array.py'
!>                                 magnitudes=[5,5,6],
!>                                 distances=distances)
!>         ground_motion.set_slicing(magnitudes=(1,),distances=(0,1))
             
!>         print ground_motion[i,j]
           # prints: ground_motion_function(magnitudes=magnitudes[i],
!>                                          distances=distances[i,j])
   
!>     Example 3:
!>         distance=JIT_array(1D_distance_function,
!>                            'JIT_array example at line 28 of jit_array.py'
!>                            events=[(-22),(-28),(-32)],
!>                            sites=[(-25),(-30)])
                                
!>         distance.set_slicing(events=(0,),sites=(-1,))
!>         (note that the JIT_array is now set up)
   
!>         print distance[i]
           # prints: 1D_distance_function(events=events[i],sites=sites[:])     
!>     """
!>     '''
!>     Implimentation:
   
!>     The main issue with building the jit_array is this:
   
!>     Arrays collapse if you call array[i] if i is a scalar
!>     BUT
!>     Collapsing the input arrays before the function is called is a bad
!>     idea, as the function may make certain assumptions about the arrays.
   
!>     example:
!>     a=[[1,2,3]]
!>     b=[1,2]
!>     function = add
   
!>     jit=jit_array(add,a,b) (with other args as appropriate)
   
!>     jit[i,j] should return a[i,j]+b[j] => jit[0,0]=1+1
       
!>     jit[0] should return [1,2,3] => a[0,:]+b[:] => [1,2,3] + [1,2] BAD
!>                                                 => [[1,2,3]]+[1,2] GOOD
   
!>     a+b=[]
       
   
!>     SO
   
!>     Arrays are not collapsed before the function is called
!>     AND
!>     The answer is collapsed as appropriate at the end
   
       
!>     '''
!>     def __init__(self,function,docs,**keyword_arguments):
!>         assert isinstance(docs,str)
!>         self.arrays=keyword_arguments
!>         self.function=function
!>         self.docs=docs
   
!>     def set_slicing(self,**keyword_arguments):
!>         self.slices=keyword_arguments
!>         slice_keys=self.slices.keys()
!>         array_keys=self.arrays.keys()
!>         assert len(slice_keys)==len(array_keys)
!>         for key in array_keys:
!>             assert keyword_arguments.has_key(key)
   
!>     def __getitem__(self,key):        
!>         '''
!>         SIMPLIFIED:  
!>         local_arrays={}      
!>         for array_name in self.arrays.keys():
!>             local_array=self.arrays[array_name]            
!>             slice_list=[]        
!>             for i in self.slices[array_name]:
!>                 slice_list.append(key[i])
!>             local_arrays[array_name]=local_array[tuple(slice_list)] 
!>         answer=self.function(**local_arrays)
   
!>         OR
           
!>         local_arrays={}
!>         for array_name in self.arrays.keys():     
!>             array_slices=self.slices[array_name]
!>             local_arrays[array_name]=local_array[(key[i] for i in array_slices)] 
!>         answer=self.function(**local_arrays)
   
!>         neither of these really works, but they are the general idea
!>         '''        
!>         None_slice=slice(None)
           #print '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!'
           #print self.docs
           #print 'key = ',key
!>         try: key_length=len(key)
!!         except: key = (key,);key_length=1
!>         assert isinstance(key,tuple) #Not supporting index tricks
           
!>         local_arrays={}
!>         for array_name in self.arrays.keys():
               #print
               #print '   ',array_name
               #print 'slices',self.slices[array_name]
!>             local_array=self.arrays[array_name]
               
!>             slice_list=[]            
!>             if self.slices[array_name] is None:
!!                 local_arrays[array_name]=local_array # don't slice it
!>             else:
                   # slice it
!>                 for i in self.slices[array_name]:
                       #print 'i=',i
!>                     try:
!>                         key_i = key[i]
!!                     except IndexError: # Support j_array[i] as j_array[i,:]
!!                         key_i = None_slice                    
!>                     if isinstance(key_i,int):
!>                         key_i=slice(key_i,key_i+1)
                           # This gets the same element, but does not
                           # collapse the array.
   
                           # We don't want to collapse the array until
                           # the end.
!>                     slice_list.append(key_i) # The usual case
                   #print local_array
                   #print slice_list
                   #print array_name
!>                 local_arrays[array_name]=local_array[tuple(slice_list)]
                   # slice it the array with the list you just built
   
!>         answer=self.function(**local_arrays)
   
           # getitem for arrays does this (to collapse axis):
   
           # if you knew how long key was, you could type:
           # ...
           # if isinstance(key[2],int): answer=answer[:,:,0] 
           # if isinstance(key[1],int): answer=answer[:,0] 
           # if isinstance(key[0],int): answer=answer[0]
   
!>         slice_list = [slice(None)]*key_length # slice(None) is [:]
!>         for key_i in key[::-1]: # key reversed
!>             slice_list.pop()
!>             if isinstance(key_i,int):
!>                 answer=answer[tuple(slice_list+[0])]        
!>         return answer
   
       
!>     def __call__(self,**kwargs):
!!         rank=-1
!!         for key in self.slices.keys():
               
!!             if self.slices[key] is not None:
!!                 for s in self.slices[key]:
!!                     rank=max((rank,s))
!!         if rank ==-1:
!!             raise ValueError
           #print 'got rank',rank,'from',self.slices
   
!!         '''
!!         first_element=self[tuple([slice(0,1)]*rank)]
           # get self(0:1,0:1 ... ) - first element but with no collapses.
   
!!         first_element_type=type(first_element)
   
!!         try:
!!             first_element_function=first_element_type.__getattr__
!!         except AttributeError: 
!!             first_element_function=first_element_type.__getattribute__
           
!!         def function(array,**kwargs):
!!             return first_element_function(array,'__call__')(**kwargs)
           # XXX __getattribute__ can't take keywords, so
           # wrap a lambda around it. 
   
           #from operator import attrgetter
           #function=attrgetter('__call__')
   
!!         '''
           
!!         def function(array,**kwargs):
!!             try:
!!                 getattribute=array.__getattr__
!!             except AttributeError: 
!!                 getattribute=array.__getattribute__
!!             return getattribute('__call__')(**kwargs)
               
   
!!         docs = 'Jit_array.py __call__'
!!         answer = JIT_array(function,docs,array=self,**kwargs)
   
           
!!         slicing={}
!!         slicing['array']=range(rank+1)
!!         for key in kwargs.keys():
!!             slicing[key]=None
   
!!         answer.set_slicing(**slicing)
!!         return answer
       
       
!>     def __getattr__(self,attribute_name):
!>         """
!>         Letting jit_array.py have just in time attributes.
!>         So a.median[:] can be used instead of a[:].median.
!>         Implimentation a bit strange from the inside, but I like the interface.
!>         """        
!!         rank=-1
!!         for key in self.slices.keys():
!!             if self.slices[key] is not None:
!!                 for s in self.slices[key]:  
!!                     rank=max((rank,s))  
           #print 'got rank',rank,'from',self.slices
!!         if rank ==-1:
!!             raise ValueError
           
!!         slicing={}
!!         slicing['array']=range(rank+1)
           #slicing['array']=range(rank) # answer[i,j]=array[i,j].attribute
!!         slicing['attribute_name']=None # don't slice attribute_name
   
!!         '''
!!         first_element=self[tuple([slice(0,1)]*rank)]
           # get self(0:1,0:1 ... ) - first element but with no collapses.
           
!!         first_element_type=type(first_element)
!!         try:
!!             first_element_function=first_element_type.__getattr__
!!         except AttributeError: 
!!             first_element_function=first_element_type.__getattribute__
           
!!         def function(array,attribute_name):
!!             return first_element_function(array,attribute_name)
           # XXX __getattribute__ can't take keywords, so
           # wrap a lambda around it.
   
!!         '''
!!         def function(array,attribute_name):
!!             try:
!!                 getattribute=array.__getattr__
!!             except AttributeError: 
!!                 getattribute=array.__getattribute__
!!             return getattribute(attribute_name)
           
   
!!         docs = 'Jit_array.py getattrib: '+attribute_name
!!         answer = JIT_array(function,docs,array=self,
!!                            attribute_name=attribute_name)
!!         answer.set_slicing(**slicing)
!!         return answer
   
