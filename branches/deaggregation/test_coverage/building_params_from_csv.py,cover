>> """ Read in a building parameter file.
   
>>  Title: building_params_from_csv.py
     
>>   Description: Read in a building parameter file, such as
>>   building_parameters_workshop_3.
     
>>   Version: $Revision: 929 $  
>>   ModifiedBy: $Author: dgray $
>>   ModifiedDate: $Date: 2009-04-08 16:43:41 +1000 (Wed, 08 Apr 2009) $
     
>> """
   
!> from scipy import ones, allclose, array, asarray, newaxis
   
!> from eqrm_code.csv_interface import csv_to_arrays
   
   # ie bp=building_params_from_csv('building_parameters_workshop_3')
!> def building_params_from_csv(csv_name,main_dir='../'):
!>     """create building parameters dictionary
!>     Args:    
!>       csv_name: The name of the parameter file with the _params.csv
!>       part removed, eg building_parameters_workshop_3
!>       main_dir: the python_eqrm directory
         
!>     Returns:
!>       A dict with the parameter info.     
!>     """
       
       #print "csv_name", csv_name
       # Get the data out of _params.csv
>>     attribute_conversions={}
>>     attribute_conversions['structure_class']=str
>>     attribute_conversions['structure_classification']=str
>>     for name in ['design_strength','height','natural_elastic_period',
>>                  'fraction_in_first_mode','height_to_displacement',
>>                  'yield_to_design','ultimate_to_yield','ductility',
>>                  'damping_s','damping_m','damping_l','damping_Be',
>>                  'structural_damage_slight','structural_damage_moderate',
>>                  'structural_damage_extreme','structural_damage_complete']:
>>         attribute_conversions[name]=float                              
>>     building_parameters=csv_to_arrays((csv_name+'_params.csv'),
>>                                       **attribute_conversions)
>>     attribute_conversions={}
       # Get the data out of _non_structural_damage_params.csv
>>     for name in ['non_residential_drift_threshold',
>>                  'residential_drift_threshold'
>>                  ,'acceleration_threshold']:
>>         attribute_conversions[name]=float
>>     building_nsd_parameters=csv_to_arrays(
>>         (csv_name+'_non_structural_damage_params.csv'),
>>          **attribute_conversions)
>>     for name in ['non_residential_drift_threshold',
>>                  'residential_drift_threshold',
>>                  'acceleration_threshold']:
>>          building_parameters[name]=building_nsd_parameters[name][newaxis,:]
   
       # transform the data:
       #     turn height from feet to mm
       #     multiply drift damage by height
       #return building_parameters
>>     cvt_in2mm = 25.40
       # Conversion for structural damage    
>>     building_parameters['height']*=12*cvt_in2mm
       #building height: convert feet to inches to mm
>>     height_to_displacement=building_parameters['height_to_displacement']
>>     height=building_parameters['height']
   
       #setup damage state median thresholds (also feet -> mm)
>>     structural_damage_slight=building_parameters.pop(
>>         'structural_damage_slight')
>>     structural_damage_moderate=building_parameters.pop(
>>         'structural_damage_moderate')
>>     structural_damage_extreme=building_parameters.pop(
>>         'structural_damage_extreme')
>>     structural_damage_complete=building_parameters.pop(
>>         'structural_damage_complete')
>>     structural_damage_threshold=asarray((structural_damage_slight,
>>                                          structural_damage_moderate,
>>                                          structural_damage_extreme,
>>                                          structural_damage_complete))    
>>     structural_damage_threshold=structural_damage_threshold.swapaxes(0,1)
       
>>     structural_damage_threshold=structural_damage_threshold*(
>>         (height_to_displacement*height)[:,newaxis])
>>     building_parameters['structural_damage_threshold']=structural_damage_threshold
   
       #setup damage state median thresholds (also feet -> inches)    
>>     non_residential_drift_threshold=building_parameters ['non_residential_drift_threshold']    
>>     non_residential_drift_threshold=non_residential_drift_threshold*(
>>         (height_to_displacement*height)[:,newaxis])
       
   
>>     building_parameters['non_residential_drift_threshold']=non_residential_drift_threshold
   
>>     residential_drift_threshold=building_parameters['residential_drift_threshold']
>>     residential_drift_threshold=residential_drift_threshold*(
>>         (height_to_displacement*height)[:,newaxis])  
>>     building_parameters['residential_drift_threshold']=residential_drift_threshold
   
       # expand acceleleration_threshold to be the same size as the rest.
>>     acceleration_threshold=building_parameters['acceleration_threshold']
>>     acceleration_threshold=acceleration_threshold+0*height[:,newaxis]
>>     building_parameters['acceleration_threshold']=acceleration_threshold
   
                  
       # Get the cost ratios - hazus    
>>     structure_ratio=open(main_dir+'/resources/data/rc_perReplCostwrtBuildCEdwardsHazususage_rc_perReplCostwrtbuildUsage_struct.txt')          
>>     nsd_d_ratio=open(main_dir+'/resources/data/rc_perReplCostwrtBuildCEdwardsHazususage_rc_perReplCostwrtbuildUsage_nsd_d.txt')        
>>     nsd_a_ratio=open(main_dir+'/resources/data/rc_perReplCostwrtBuildCEdwardsHazususage_rc_perReplCostwrtbuildUsage_nsd_a.txt')
   
>>     structure_ratio=matlab_to_array(structure_ratio)/100.0
>>     nsd_d_ratio=matlab_to_array(nsd_d_ratio)/100.0
>>     nsd_a_ratio=matlab_to_array(nsd_a_ratio)/100.0
   
       # check that the values add up to 1.
>>     total = structure_ratio + nsd_d_ratio + nsd_a_ratio
>>     standard = ones(total.shape)
       
       # Drop this is to check the assert works
       #standard[0,0] = 0.8
>>     msg = "The replacement cost percentages do not add up to 100."    
>>     assert allclose(standard, total), msg
       
>>     building_parameters['hazus_structure_ratio']=structure_ratio
>>     building_parameters['hazus_nsd_d_ratio']=nsd_d_ratio
>>     building_parameters['hazus_nsd_a_ratio']=nsd_a_ratio
           
       # Get the cost ratios - fcb
>>     structure_ratio=open(main_dir+'/resources/data/rc_perReplCostwrtBuildCEdwardsFCBusage_rc_perReplCostwrtbuildUsage_struct.txt')     
>>     nsd_d_ratio=open(main_dir+'/resources/data/rc_perReplCostwrtBuildCEdwardsFCBusage_rc_perReplCostwrtbuildUsage_nsd_d.txt')
>>     nsd_a_ratio=open(main_dir+'/resources/data/rc_perReplCostwrtBuildCEdwardsFCBusage_rc_perReplCostwrtbuildUsage_nsd_a.txt')
       
>>     structure_ratio=matlab_to_array(structure_ratio)/100.0
>>     nsd_d_ratio=matlab_to_array(nsd_d_ratio)/100.0
>>     nsd_a_ratio=matlab_to_array(nsd_a_ratio)/100.0
   
>>     building_parameters['fcb_structure_ratio']=structure_ratio
>>     building_parameters['fcb_nsd_d_ratio']=nsd_d_ratio
>>     building_parameters['fcb_nsd_a_ratio']=nsd_a_ratio
       
       #print "building_parameters", building_parameters
>>     return building_parameters 
       
   
!> def matlab_to_array(f):
>>     answer=[[float(v) for v in line.split(' ') if not v=='']
>>             for line in f if not line.strip(' ')=='']
>>     answer=array(answer)
>>     return answer
