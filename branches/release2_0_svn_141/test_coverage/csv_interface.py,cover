>> """
>>  Title: csv_interface.py
     
>>   Author:  Peter Row, peter.row@ga.gov.au
   
   
>>   Description: A class to convert csv files to arrays.
     
   
>>   Version: $Revision: 914 $  
>>   ModifiedBy: $Author: dgray $
>>   ModifiedDate: $Date: 2009-04-01 11:11:47 +1100 (Wed, 01 Apr 2009) $
     
>>   Copyright 2007 by Geoscience Australia
>> """
    
!> from csv import DictReader   
!> from scipy import array
   
   
   #FIXME(DSG) these should be functions, not a class.
   
!> class Csv_interface:
!>     def csv_to_arrays(self,filename,**attribute_conversions):
!>         """
!>         Usage:
!>         filename="site_data.csv"
           
!>         attribute_conversions={}
!>         attribute_conversions["LATITUDE"]=float
!>         attribute_conversions["LONGITUDE"]=float
!>         attribute_conversions["ADDRESS"]=str
           
!>         site_data=convert_csv_to_dictionary(filename,**attribute_conversions)
!>         """
>>         try:
               # bring the whole lot into memory, then convert it
>>             if isinstance(filename,file):
>!                 f=filename
>>             else:
>>                 f=open(filename,"rb")
>>             answer=self.quick_convert_csv_to_arrays(f,**attribute_conversions)
>>             f.close()
>>             return answer
!!         except MemoryError:
               # bring the arrays into memory one by one.
               # The quick way takes up a lot if memory for a short while,
               # as it reads everything into lists (before converting to arrays).
               
               # This way still uses lists, but only one for one attribute
               # at a time.
!!             answer={}
!!             for key in attribute_conversions.keys():
!!                 if isinstance(filename,file):
!!                     f=filename
!!                 else:
!!                     f=open(filename, "rb")
!!                 conversion=attribute_conversions[key]
!!                 answer[key]=self.csv_to_array(f,key,conversion)
!!                 f.close()
!!             return answer
           
!>     def quick_convert_csv_to_arrays(f,**attribute_conversions):
>>         reader=DictReader(f)
>>         convert=attribute_conversions
>>         keys=convert.keys()
>>         data=[[convert[key](row[key].strip(' ')) for key in keys] for row in reader]
>>         '''
>>         data=[]
>>         for row in reader:
>>             data.append([convert[key](row[key].strip(' ')) for key in keys])
               # data is a list of lists of all '''
           
>>         answer={}
>>         for i,key in enumerate(keys):
>>             answer[key]=array([row[i] for row in data])
>>         return answer
           
!>     def csv_to_array(f,key,conversion): 
!>         reader=DictReader(f)
!>         return array([conversion(row[key].strip(' ')) for row in reader])
               
!>     quick_convert_csv_to_arrays=staticmethod(quick_convert_csv_to_arrays)
!>     csv_to_array=staticmethod(csv_to_array)
!>     csv_to_arrays=classmethod(csv_to_arrays)
       # staticmethod makes a method behave like a function (no instance needed)
       
       # classmethod is like a staticmethod, but can call on other staticmethods
       # through self (often self is renamed klass, it looks odd)
   
       
!> csv_to_arrays=Csv_interface.csv_to_arrays
