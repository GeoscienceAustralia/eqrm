This document contains text documenting the plot routines.

This text will be put into a LaTex document at some point.
----------------------------------------------------------------------------
Plotting Overview

The EQRM plot_* functions have many parameters that may be used.  Many of these
parameters are common between the functions, and we discuss these parameters
here.

A common plot function call might look something like this:

    plot_xyzzy(data, output_file='my_file', title='The Title', show_graph=True,
               grid=False, colormap=None, annotate=[(0.5,0.5,'centre text')])

The 'data' parameter is a python object containing the data that is to be plotted.
The exact structure of the data in the object is function-specific.

The parameter 'output_file' defines the path to the file to be generated.  The type
of file generated is determined by the file extension.  An output_file value of
'my_file.png' will create a PNG file and a value of 'another_file.eps' will create
an encapsulated Postscript file, etc. The types of files you can save depends on
which libraries you have built into your matplotlib system.  A full path such as
'/home/my_name/tmp/test.png' is allowed.

The 'title' parameter specifies the title placed at the top of the generated plot.
If no title is supplied there will be no title in the plot.

'show_graph' controls whether the plot is displayed on the screen or not.  Note that 
if you are running on another machine the plot display will fail if you didn't
do 'ssh -X <machine>' to get to that machine (ie, the DISPLAY environment variable
must be set).  Either or both of 'output_file' and 'show_graph' may be set to True.

The 'grid' parameter controls whether a grid is displayed on the plot.

The 'colormap' parameter is a string containing the name of a colourmap scheme.  The
matplotlib colourmap names are documented at:
    http://matplotlib.sourceforge.net/examples/pylab_examples/show_colormaps.html

There is also provision for 'local' colourmaps.  These are defined in util_colormaps.py
and you will find the localnames there.

The 'annotate' parameter allows the user to place text on the generated plot in a
variety of ways.  The parameter is either:
    None
    []
    [(x, y, text, dict), ...]
where None means no annotations at all, even system ones,
      []   means only system annotations, none for the user, and
      [(x, y, text, dict), ...]
           means system annotations plus user annotations.

Each tuple of user annotation has the form (x, y, text, dict)
where x     is the X coordinate on the *screen* of where to place the text,
      y     is the Y coordinate on the *screen* of where to place the text,
      text  is the actual text to place on the plot, and
      dict  is an optional dictionary of parameters to fine tune the annotation
            (the 'dict' need not be supplied).

The 'dict' values control text alignment, colour and rotation, amongs many others.
An example 'dict' might be:
    dict = {'alpha': 0.5,                    # half transparent
            'color': 'blue',
            'horizontalalignment': 'center', # or 'right' or 'left'
            'rotation': 90.0,
            'style': 'italic',               # or 'normal'
            'weight': 'bold'                 # 'regular', 'light', 'black'
           }

See:
    http://matplotlib.sourceforge.net/api/pyplot_api.html
and look for the pyplot.text() sectioni for all the detail.

----------------------------------------------------------------------------
Plotting functions

Here we describe the plot functions.  The common parameters that were described
above are not discussed here.


plot_annloss_deagg_distmag.py function

This function plots Annual Loss Deaggregated Distance and Magnitude data.

The function definition is:
def plot_annloss_deagg_distmag(data, momag_labels, range_bins, pct_limits,
                               output_file=None, title=None,
                               show_graph=False, grid=False, colormap=None,
                               annotate=[]):

The 'data' parameter is an MxN array containing % annualised loss values
with axes of moment/magnitude data (M) versus distance (N).  This data
will usually be generated by the calc_annloss_deagg_distmag.py function.

'momag_labels' is an iterable containing the y-axis labels for each row of 'data'.

'range_bins' is an iterable containing the x-axis range labels for each column of 'data'.

'pct_limits' is a tuple (or similar) containing the range of values that will
be plotted.  Think of this as the 'window' of values you want plotted.


plot_hexbin_map.py function

This function allows you to plot randomly sampled data into a hexagonal grid
on a map overlay.

The function definition is:
def plot_hexbin_map(data, title='', output_file=None, cblabel='',
                    cbformat='%.1f', show_graph=False, grid=True, colormap=None,
                    annotate=[], hexbin_args=None):

The 'data' parameter is a Nx3 array containing N rows of (lat, lon, value) data.

The 'cblabel' parameter is the text label to be plotted on the colourbar.

The 'cbformat' parameter sets the display format of the numeric value ticks on the colourbar.

The 'hexbin_args' parameter is a dictionary of extra parameters to provide finer 
control over the hexbin plot.  The most important valies in the dictionary are:
    'gridsize'   specifies the size of the hex grid in cells in the x-axis direction.
    'edgecolors' specifies the colour of edging around each hex bin.
    'linewidths' sets the width of edging around each hex bin.
    'bins'       if None, the colour of each bin is linear with value,
                 if 'log' use a logarithmic scale for the colour map.
    'mincnt'     may be used to set a threshold value below which bins will not be plotted.
    'alpha'      sets the transparency of the hex bins.
    'reduce_C_function'
                 sets the function used to produce the 'binned' values in each hex bin.
                 The default function (numpy.sum) sums the values in each bin.

The full set of hexbin parameters are defined at:
    http://matplotlib.sourceforge.net/api/pyplot_api.html
Look for the matplotlib.pyplot.hexbin function.


plot_pml.py

This function plots ...

The function definition is:
def plot_pml(pml_data, title='', output_file=None, grid=True, show_graph=False, annotate=[]):

The 'data' parameter is data produced by the calc_pml() function.

----------------------------------------------------------------------------
Plot Utility Functions

There a number of utility modules that support the above plot modules.  These modules
are not meant to be called directly by the user.


util_colormaps.py modules

This module contains the locally-defined colourmaps.


util_get_extent.py function

This module takes randomly sampled values at a lat_lon and returns the extent of the data.


util_timestamp.py function

This module contains code to place a timestamp annotation on a plot.


util_user_annotation.py function

This module contains code to place user annotations on a plot.

