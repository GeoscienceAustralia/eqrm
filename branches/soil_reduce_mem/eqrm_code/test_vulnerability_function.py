import unittest
from scipy import asarray, arange, resize, allclose, exp

from eqrm_code.vulnerability_model import *

class Test_Vulnerability_Function(unittest.TestCase):
    
    def setUp(self):
        self.mean_values = asarray([0,1])
        self.cv_values = asarray([1,1])
        self.mmi_values = asarray([4,10])
    
    def tearDown(self):
        pass
    
    def test_calc_mean(self):
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='N',
                                      var_method=None)
        
        (mean, sigma) = func.calc_mean(7, self.mmi_values)
        self.assertEqual(0.5, mean, 
                         'mean=%s is not equal to expected 0.5' % mean)
        self.assertEqual(0.5, sigma, 
                         'sigma=%s is not equal to expected 0.5' % mean)
    
    def test_sample_no_variability_lognormal(self):
        # Vulnerability_Function.sample is essentially a wrapper around
        # Distribution_Log_Normal.sample_for_eqrm (distribution='LN')
        # The mean and sigma can be anything so we'll ignore the setup values
        
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='LN',
                                      var_method=None)
        
        # dimensions (2,1,3,4) = 24 elements
        dim = (2,1,3,4)
        count_up = arange(1,24,1)
        log_mean = resize(count_up*10, dim)
        log_sigma = resize(count_up, dim)
        
        sample_values = func.sample(log_mean,log_sigma)

        actual = exp(log_mean)
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)

        
    def test_sample_sigmas_lognormal(self):
        # Vulnerability_Function.sample is essentially a wrapper around
        # Distribution_Log_Normal.sample_for_eqrm (distribution='LN')
        # The mean and sigma can be anything so we'll ignore the setup values
        
        # dimensions (2,1,3,4) = 24 elements
        dim = (2,1,3,4)
        count_up = arange(1,24,1)
        log_mean = resize(count_up*10, dim)
        log_sigma = resize(count_up, dim)
        
        var_method = 3
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='LN',
                                      var_method=var_method)
        sample_values = func.sample(log_mean,log_sigma)
        actual = exp(log_mean + 2*log_sigma)
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)

        var_method = 4      
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='LN',
                                      var_method=var_method)
        sample_values = func.sample(log_mean,log_sigma)
        actual = exp(log_mean + log_sigma)
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)
        
        var_method = 5      
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='LN',
                                      var_method=var_method)
        sample_values = func.sample(log_mean,log_sigma)
        actual = exp(log_mean - log_sigma)
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)
        
        var_method = 6    
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='LN',
                                      var_method=var_method)
        sample_values = func.sample(log_mean,log_sigma)
        actual = exp(log_mean - 2*log_sigma)
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)
        
    def test_sample_no_variability_normal(self):
        # Vulnerability_Function.sample is essentially a wrapper around
        # Distribution_Normal.sample_for_eqrm (distribution='N')
        # The mean and sigma can be anything so we'll ignore the setup values
        
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='N',
                                      var_method=None)
        
        # dimensions (2,1,3,4) = 24 elements
        dim = (2,1,3,4)
        count_up = arange(1,24,1)
        mean = resize(count_up*10, dim)
        sigma = resize(count_up, dim)
        
        sample_values = func.sample(mean,sigma)

        actual = mean
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)
        
    def test_sample_sigmas_normal(self):
        # Vulnerability_Function.sample is essentially a wrapper around
        # Distribution_Normal.sample_for_eqrm (distribution='N')
        # The mean and sigma can be anything so we'll ignore the setup values
        
        # dimensions (2,1,3,4) = 24 elements
        dim = (2,1,3,4)
        count_up = arange(1,24,1)
        mean = resize(count_up*10, dim)
        sigma = resize(count_up, dim)
        
        var_method = 3
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='N',
                                      var_method=var_method)
        sample_values = func.sample(mean,sigma)
        actual = mean + 2*sigma
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)

        var_method = 4      
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='N',
                                      var_method=var_method)
        sample_values = func.sample(mean,sigma)
        actual = mean + sigma
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)
        
        var_method = 5      
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='N',
                                      var_method=var_method)
        sample_values = func.sample(mean,sigma)
        actual = mean - sigma
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)
        
        var_method = 6    
        func = Vulnerability_Function('test',
                                      self.mean_values,
                                      self.cv_values,
                                      distribution='N',
                                      var_method=var_method)
        sample_values = func.sample(mean,sigma)
        actual = mean - 2*sigma
        self.assert_(allclose(sample_values, actual))
        self.assert_(actual.shape == dim)  
    

#-------------------------------------------------------------
if __name__ == "__main__":
    suite = unittest.makeSuite(Test_Vulnerability_Function,'test')
    runner = unittest.TextTestRunner()
    runner.run(suite)
    
