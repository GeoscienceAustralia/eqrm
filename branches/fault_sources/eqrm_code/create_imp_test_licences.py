#!/usr/bin/env python

"""
Auto generate licences for the implementation test output.
This has nothing to do with earthquakes.
It is a data bookkeeping script.
  
  Copyright 2007 by Geoscience Australia
"""

import os


from eqrm_code.ANUGA_utilities.system_tools import compute_checksum
from os.path import join, basename
from os import walk

def write_licence(path_file, author,accountable):

	# Create associated license file
        path_license_filename = path_file[:-4] + '.lic'
	file = basename(path_file)
	licfid = open(path_license_filename, 'w')
	xml_string = """<?xml version="1.0" encoding="iso-8859-1"?>

  <ga_license_file>
    <metadata>
      <author>%s</author>
    </metadata>
    <datafile>
      <filename>%s</filename>
      <checksum>%s</checksum>
      <publishable>Yes</publishable>
      <accountable>%s</accountable>
      <source>This is implementation_test output from the EQRM model. If GA owns the IP for the input, we own the IP for the output.  See TRIM D2008-56963</source>
      <IP_owner>Geoscience Australia</IP_owner>
      <IP_info>For use with EQRM validation</IP_info>
    </datafile>

  </ga_license_file>
""" %(author, file,str(compute_checksum(path_file)) ,accountable)
        
        licfid.write(xml_string)
	licfid.close()
      #<source>Generated by ANUGA development team</source>
        
def add_licences(extension, author,accountable):
    files = os.listdir('.')
    files = [x for x in files if x[-4:] == extension]
    #print "files", files
    for file in files:
        write_licence(file,author,accountable)
   
def add_licences_recursively(root, extension, author,accountable):
	
    for dirpath, filename in identify_datafiles(root,
                                                extension,
                                                ['.svn']):

        path_file = join(dirpath, filename)
        write_licence(path_file,author, accountable)
     
def identify_datafiles(root,
                       extension_to_use=None,
                       directories_to_ignore=None):
    """ Identify files that might contain data

    """

    for dirpath, dirnames, filenames in walk(root):

	# the caller can modify the dirnames list in-place (perhaps
	# using del or slice assignment), and walk() will only recurse
	# into the subdirectories whose names remain in dirnames; this
	# can be used to prune the search
	
        for ignore in directories_to_ignore:
            if ignore in dirnames:
                dirnames.remove(ignore)  # don't visit ignored directories

        for filename in filenames:
            # Ignore extensions that need no IP checklicence
            #print "filename to check extension", filename
            if filename.endswith(extension_to_use):
                yield dirpath, filename

#-------------------------------------------------------------
if __name__ == "__main__":
    #write_licence('no_see.gif','Duncan Gray')
    add_licences_recursively(join('..','implementation_tests','standard'),
			     '.txt','automatically generated',
			     'David Robinson')
    add_licences_recursively(join('..','implementation_tests','mini_standard'),
			     '.txt','automatically generated',
			     'David Robinson')

