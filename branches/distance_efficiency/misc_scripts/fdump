#!/usr/bin/env python

"""File hexdump program.

Usage: fdump <file>
"""

import sys
import getopt
import os.path


HEXLEN = 48
CHARLEN = 16


def hexdump(filename):
    """Dump contents of file as hex+ascii."""

    f = open(filename, 'rb', 8192)

    offset = 0
    while True:
        data = f.read(16)
        if len(data) == 0:
            break
        print(hexdump_line(data, offset))
        offset += 16

    f.close()


def hexdump_line(s, offset):
    """Generate one line of fdump output.

    s       string to convert (16 bytes or less)
    offset  offset from start of dump
    """

    hex = ''
    char = ''
    for c in s:
        ordc = ord(c)
        hex += '%02x ' % ordc
        if ord(' ') <= ordc <= ord('~'):
            char += c
        else:
            char += '.'
    hex = (hex + ' '*HEXLEN)[:HEXLEN]
    char = (char + '|' + ' '*CHARLEN)[:CHARLEN+1]
    return '%04X  %s |%s  %d' % (offset, hex, char, offset)


################################################################################


ProgName = None

def usage():
    print 'usage: %s <file>' % ProgName
    print 'where <file> is the file to produce the hexdump of.'

def main(argv):
    global ProgName

    ProgName = os.path.basename(argv[0])

    try:
        opts, args = getopt.gnu_getopt(argv, "h", ["help"])
    except getopt.GetoptError:
        usage()
        return 10

    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            return 0

    if len(args) != 2:
        usage()
        return 10

    filename = args[1]
    try:
        f = open(filename)
    except IOError:
        print "Sorry, can't find file '%s'" % filename
        return 10
    f.close()

    hexdump(filename)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
