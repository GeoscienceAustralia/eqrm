import os
import shutil
import tempfile
import unittest

from numpy import allclose, array, newaxis, zeros

from eqrm_code.util import string_array_equal
from eqrm_code.structures_vulnerability import Structures_Vulnerability

class Dummy:
    def __init__(self):
        pass

class Test_Structures_Vulnerability(unittest.TestCase):
    
    def setUp(self):
        self.site_tag = "test_site"
        self.input_dir = tempfile.mkdtemp()
        
        self.raw_xml = """<?xml version="1.0"?>
<nrml xmlns="http://openquake.org/xmlns/nrml/0.3" xmlns:gml="http://www.opengis.net/gml" gml:id="nrml">
  <vulnerabilityModel>
    <discreteVulnerabilitySet vulnerabilitySetID="HAZUS" assetCategory="buildings" lossCategory="economic_loss">
      <IML IMT="MMI"> 0.00 5.27 6.15 6.67 7.04 7.33 7.56 7.76 7.93 8.08 8.22 8.34 8.45 8.58 8.67 8.76 8.84 8.91 8.99 9.05 9.12 9.18 9.24 9.30 9.35 9.40 9.45 9.50 9.55 9.59 9.63 9.68 9.72 9.75 9.79 9.83 9.87 9.90 9.94 9.98 10.0</IML>
      <discreteVulnerability vulnerabilityFunctionID="W1TIMBERMETAL" probabilisticDistribution="N">
        <lossRatio> 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.02 0.03 0.04 0.06 0.08 0.10 0.13 0.15 0.18 0.21 0.24 0.27 0.31 0.34 0.37 0.40 0.43 0.46 0.49 0.52 0.55 0.58 0.60 0.63 0.65 0.67 0.70 0.72 1.00</lossRatio>
        <coefficientsVariation> 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30</coefficientsVariation>
      </discreteVulnerability>
      <discreteVulnerability vulnerabilityFunctionID="W1BVMETAL" probabilisticDistribution="N">
        <lossRatio> 0.00 0.04 0.15 0.25 0.34 0.42 0.49 0.55 0.60 0.64 0.67 0.71 0.73 0.76 0.78 0.80 0.81 0.83 0.84 0.85 0.87 0.87 0.88 0.89 0.90 0.91 0.91 0.92 0.92 0.93 0.93 0.94 0.94 0.94 0.95 0.95 0.95 0.95 0.96 0.96 1.00</lossRatio>
        <coefficientsVariation> 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30</coefficientsVariation>
      </discreteVulnerability>
    </discreteVulnerabilitySet>
  </vulnerabilityModel>
</nrml>"""
        f = open(os.path.join(self.input_dir, 
                              '%s_vulnerability.xml' % self.site_tag), 'wb')
        f.write(self.raw_xml)
        f.close()
        
        self.sites_filename = os.path.join(self.input_dir,
                                           'sitedb_%s.csv' % self.site_tag)
        
        self.raw_csv = """BID,LATITUDE,LONGITUDE,STRUCTURE_CLASSIFICATION,STRUCTURE_CATEGORY,HAZUS_USAGE,SUBURB,POSTCODE,PRE1989,HAZUS_STRUCTURE_CLASSIFICATION,CONTENTS_COST_DENSITY,BUILDING_COST_DENSITY,FLOOR_AREA,SURVEY_FACTOR,FCB_USAGE,SITE_CLASS,
2,-6.4125,110.837502,W1TIMBERMETAL, BUILDING,,TURNER,2612,,,344.4451,688.8903,150,9.8,, C, 
3,-6.4125,110.845833,W1BVMETAL, BUILDING,,TURNER,2612,,,430.5564,861.1128,480,1,, C, 
4,-6.4125,110.854164,W1TIMBERMETAL, BUILDING,,TURNER,2612,,,1087.155,1087.155,300,1,, C, """
        f = open(self.sites_filename, 'wb')
        f.write(self.raw_csv)
        f.close()
        
        self.eqrm_flags = Dummy()
        self.eqrm_flags.site_tag = self.site_tag
        self.eqrm_flags.input_dir = self.input_dir
        self.eqrm_flags.vulnerability_variability_method = None
        
        self.sites = Structures_Vulnerability.from_csv(self.sites_filename, 
                                                       self.eqrm_flags)
        
        self.msg = 'Expected %s, got %s'
        
        
    def tearDown(self):
        shutil.rmtree(self.input_dir)
        
    def test_from_csv(self):
        
        # Check length
        expected_length = 3
        self.assertEqual(len(self.sites), expected_length,
                         self.msg % (expected_length, len(self.sites)))
        
        # Check lat/lon
        # LATITUDE
        expected_latitude = [-6.4125, -6.4125, -6.4125]
        self.assertTrue(allclose(self.sites.latitude, expected_latitude),
                        self.msg % (expected_latitude, self.sites.latitude))
        
        # LONGITUDE
        expected_longitude = [110.837502, 110.845833, 110.854164]
        self.assertTrue(allclose(self.sites.longitude, expected_longitude),
                        self.msg % (expected_longitude, self.sites.longitude))
        
        # Check attributes
        attributes = self.sites.attributes
        
        # BID
        expected_bid = [2,3,4]
        self.assertTrue(allclose(attributes['BID'], expected_bid),
                        self.msg % (expected_bid, attributes['BID']))
        
        # STRUCTURE_CLASSIFICATION
        expected_struct_class = ['W1TIMBERMETAL', 'W1BVMETAL', 'W1TIMBERMETAL']
        self.assertTrue(string_array_equal(attributes['STRUCTURE_CLASSIFICATION'], 
                                           expected_struct_class),
                        self.msg % (expected_struct_class, 
                                    attributes['STRUCTURE_CLASSIFICATION']))
        
        # BUILDING_COST_DENSITY
        expected_bcd = [688.8903, 861.1128, 1087.155]
        self.assertTrue(allclose(attributes['BUILDING_COST_DENSITY'], 
                                 expected_bcd),
                        self.msg % (expected_bcd, 
                                    attributes['BUILDING_COST_DENSITY']))
        
        # FLOOR_AREA
        expected_fa = [150, 480, 300]
        self.assertTrue(allclose(attributes['FLOOR_AREA'], expected_fa),
                        self.msg % (expected_fa, attributes['FLOOR_AREA']))
        
        # SURVEY_FACTOR
        expected_sf = [9.8, 1, 1]
        self.assertTrue(allclose(attributes['SURVEY_FACTOR'], expected_sf),
                        self.msg % (expected_sf, attributes['SURVEY_FACTOR']))
        
        # SITE_CLASS
        expected_site_class = ['C', 'C', 'C']
        self.assertTrue(string_array_equal(attributes['SITE_CLASS'], 
                                           expected_site_class),
                        self.msg % (expected_site_class, 
                                    attributes['SITE_CLASS']))
        
        # POSTCODE
        expected_postcode = [2612, 2612, 2612]
        self.assertTrue(allclose(attributes['POSTCODE'], expected_postcode),
                        self.msg % (expected_postcode, attributes['POSTCODE']))
        
        # SUBURB
        expected_suburb = ['TURNER', 'TURNER', 'TURNER']
        self.assertTrue(string_array_equal(attributes['SUBURB'], 
                                           expected_suburb),
                        self.msg % (expected_suburb, attributes['SUBURB']))
        
    def test_validate_vulnerability_set(self):
        # Exception scenarios
        
        # No vulnerability set
        sites_test = self.sites[:]
        sites_test.vulnerability_set = None
        self.assertRaises(RuntimeError, sites_test.validate_vulnerability_set)
        
        # No vulnerability curve defined for a site
        sites_test = self.sites[:]
        sites_test.vulnerability_set.vulnerability_functions.pop('W1BVMETAL')
        self.assertRaises(RuntimeError, sites_test.validate_vulnerability_set)
        
        # Try another way...
        sites_test = self.sites[:]
        sites_test.attributes['STRUCTURE_CLASSIFICATION'][0] = 'unknown'
        self.assertRaises(RuntimeError, sites_test.validate_vulnerability_set)
        
        
    def test_calc_loss(self):
        # Shape - (sites, events, periods)
        test_sa = zeros((3, 1, 2))
        # ensures the MMI will be 10, so the loss ratio will be 1.0
        test_sa[:] = 10000000000000.0 
        
        loss = self.sites.calc_loss(test_sa, atten_periods = [0.0, 1.0])
        
        expected_bcd = array([688.8903, 861.1128, 1087.155])
        expected_fa = array([150, 480, 300])
        expected_sf = array([9.8, 1, 1])
        
        expected_lossratio = array([1.00, 1.00, 1.00])
        # As vulnerability_variability_method is None the interpolated loss 
        # ratio is the deterministic value
        
        expected_loss = expected_bcd * expected_fa * expected_sf * expected_lossratio
        expected_loss = expected_loss[:,newaxis]
        
        self.assertTrue(allclose(loss, expected_loss),
                        self.msg % (expected_loss, loss))
        
    def test_getitem(self):
        
        # Take a slice
        sites_test = self.sites[1]
        
        # Check length
        expected_length = 1
        self.assertEqual(len(sites_test), expected_length,
                         self.msg % (expected_length, len(sites_test)))
        
        # Check lat/lon
        # LATITUDE
        expected_latitude = [-6.4125]
        self.assertTrue(allclose(sites_test.latitude, expected_latitude),
                        self.msg % (expected_latitude, sites_test.latitude))
        
        # LONGITUDE
        expected_longitude = [110.845833]
        self.assertTrue(allclose(sites_test.longitude, expected_longitude),
                        self.msg % (expected_longitude, sites_test.longitude))
        
        # Check attributes
        attributes = sites_test.attributes
        
        # BID
        expected_bid = [3]
        self.assertTrue(allclose(attributes['BID'], expected_bid),
                        self.msg % (expected_bid, attributes['BID']))
        
        # STRUCTURE_CLASSIFICATION
        expected_struct_class = ['W1BVMETAL']
        self.assertTrue(string_array_equal(attributes['STRUCTURE_CLASSIFICATION'], 
                                           expected_struct_class),
                        self.msg % (expected_struct_class, 
                                    attributes['STRUCTURE_CLASSIFICATION']))
        
        # BUILDING_COST_DENSITY
        expected_bcd = [861.1128]
        self.assertTrue(allclose(attributes['BUILDING_COST_DENSITY'], 
                                 expected_bcd),
                        self.msg % (expected_bcd, 
                                    attributes['BUILDING_COST_DENSITY']))
        
        # FLOOR_AREA
        expected_fa = [480]
        self.assertTrue(allclose(attributes['FLOOR_AREA'], expected_fa),
                        self.msg % (expected_fa, attributes['FLOOR_AREA']))
        
        # SURVEY_FACTOR
        expected_sf = [1]
        self.assertTrue(allclose(attributes['SURVEY_FACTOR'], expected_sf),
                        self.msg % (expected_sf, attributes['SURVEY_FACTOR']))
        
        # SITE_CLASS
        expected_site_class = ['C']
        self.assertTrue(string_array_equal(attributes['SITE_CLASS'], 
                                           expected_site_class),
                        self.msg % (expected_site_class, 
                                    attributes['SITE_CLASS']))
        # POSTCODE
        expected_postcode = [2612]
        self.assertTrue(allclose(attributes['POSTCODE'], expected_postcode),
                        self.msg % (expected_postcode, attributes['POSTCODE']))
        
        # SUBURB
        expected_suburb = ['TURNER']
        self.assertTrue(string_array_equal(attributes['SUBURB'], 
                                           expected_suburb),
                        self.msg % (expected_suburb, attributes['SUBURB']))
        
    

#-------------------------------------------------------------
if __name__ == "__main__":
    suite = unittest.makeSuite(Test_Structures_Vulnerability,'test')
    runner = unittest.TextTestRunner()
    runner.run(suite)
