import os
import shutil
import tempfile
import unittest

from scipy import array, allclose, interp

from eqrm_code.vulnerability_model import *

class Dummy:
    def __init__(self):
        pass

class Test_Vulnerability_Set(unittest.TestCase):
    
    def setUp(self):
        self.site_tag = "test_site"
        self.input_dir = tempfile.mkdtemp()
        
        self.raw_xml = """<?xml version="1.0"?>
<nrml xmlns="http://openquake.org/xmlns/nrml/0.3" xmlns:gml="http://www.opengis.net/gml" gml:id="nrml">
  <vulnerabilityModel>
    <discreteVulnerabilitySet vulnerabilitySetID="HAZUS" assetCategory="buildings" lossCategory="economic_loss">
      <IML IMT="MMI"> 0.00 5.27 6.15 6.67 7.04 7.33 7.56 7.76 7.93 8.08 8.22 8.34 8.45 8.58 8.67 8.76 8.84 8.91 8.99 9.05 9.12 9.18 9.24 9.30 9.35 9.40 9.45 9.50 9.55 9.59 9.63 9.68 9.72 9.75 9.79 9.83 9.87 9.90 9.94 9.98 10.0</IML>
      <discreteVulnerability vulnerabilityFunctionID="W1TIMBERMETAL" probabilisticDistribution="N">
        <lossRatio> 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.01 0.01 0.02 0.03 0.04 0.06 0.08 0.10 0.13 0.15 0.18 0.21 0.24 0.27 0.31 0.34 0.37 0.40 0.43 0.46 0.49 0.52 0.55 0.58 0.60 0.63 0.65 0.67 0.70 0.72 1.00</lossRatio>
        <coefficientsVariation> 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30</coefficientsVariation>
      </discreteVulnerability>
      <discreteVulnerability vulnerabilityFunctionID="W1BVMETAL" probabilisticDistribution="N">
        <lossRatio> 0.00 0.04 0.15 0.25 0.34 0.42 0.49 0.55 0.60 0.64 0.67 0.71 0.73 0.76 0.78 0.80 0.81 0.83 0.84 0.85 0.87 0.87 0.88 0.89 0.90 0.91 0.91 0.92 0.92 0.93 0.93 0.94 0.94 0.94 0.95 0.95 0.95 0.95 0.96 0.96 1.00</lossRatio>
        <coefficientsVariation> 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30 0.30</coefficientsVariation>
      </discreteVulnerability>
    </discreteVulnerabilitySet>
  </vulnerabilityModel>
</nrml>"""
        f = open(os.path.join(self.input_dir, 
                              '%s_vulnerability.xml' % self.site_tag), 'wb')
        f.write(self.raw_xml)
        f.close()
        
        self.msg = 'Expected %s, got %s'
        
    def tearDown(self):
        shutil.rmtree(self.input_dir)
    
    def from_xml(self):
        eqrm_flags = Dummy()
        eqrm_flags.site_tag = self.site_tag
        eqrm_flags.input_dir = self.input_dir
        eqrm_flags.vulnerability_variability_method = 3
        return Vulnerability_Set.from_xml(eqrm_flags)
    
    def test_from_xml(self):
        vulnerability_set = self.from_xml()
        self.assertEqual(vulnerability_set.intensity_measure_type, 'MMI')
        
        expected_iml = array([0.00, 5.27, 6.15, 6.67, 7.04, 7.33, 7.56, 7.76,
                              7.93, 8.08, 8.22, 8.34, 8.45, 8.58, 8.67, 8.76, 
                              8.84, 8.91, 8.99, 9.05, 9.12, 9.18, 9.24, 9.30, 
                              9.35, 9.40, 9.45, 9.50, 9.55, 9.59, 9.63, 9.68, 
                              9.72, 9.75, 9.79, 9.83, 9.87, 9.90, 9.94, 9.98, 
                              10.0])
        self.assertTrue(allclose(expected_iml, 
                                 vulnerability_set.intensity_measure_level),
                        self.msg % (expected_iml,
                                    vulnerability_set.intensity_measure_level))
        
        w1timbermetal = vulnerability_set.vulnerability_functions['W1TIMBERMETAL']
        expected_w1timbermetal_lossratio = array([0.00, 0.00, 0.00, 0.00, 0.00,
                                                  0.00, 0.00, 0.00, 0.00, 0.00, 
                                                  0.01, 0.01, 0.02, 0.03, 0.04, 
                                                  0.06, 0.08, 0.10, 0.13, 0.15, 
                                                  0.18, 0.21, 0.24, 0.27, 0.31, 
                                                  0.34, 0.37, 0.40, 0.43, 0.46, 
                                                  0.49, 0.52, 0.55, 0.58, 0.60, 
                                                  0.63, 0.65, 0.67, 0.70, 0.72, 
                                                  1.00])
        self.assertTrue(allclose(expected_w1timbermetal_lossratio, 
                                 w1timbermetal.mean_loss_ratio),
                        self.msg % (expected_w1timbermetal_lossratio,
                                    w1timbermetal.mean_loss_ratio))
        expected_w1timbermetal_cv = array([0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                           0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                           0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                           0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                           0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                           0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                           0.30, 0.30, 0.30, 0.30, 0.30])
        self.assertTrue(allclose(expected_w1timbermetal_cv, 
                                 w1timbermetal.coefficient_of_variation),
                        self.msg % (expected_w1timbermetal_cv,
                                    w1timbermetal.coefficient_of_variation))
        
        w1bvmetal = vulnerability_set.vulnerability_functions['W1BVMETAL']
        expected_w1bvmetal_lossratio = array([0.00, 0.04, 0.15, 0.25, 0.34, 
                                              0.42, 0.49, 0.55, 0.60, 0.64, 
                                              0.67, 0.71, 0.73, 0.76, 0.78, 
                                              0.80, 0.81, 0.83, 0.84, 0.85, 
                                              0.87, 0.87, 0.88, 0.89, 0.90, 
                                              0.91, 0.91, 0.92, 0.92, 0.93, 
                                              0.93, 0.94, 0.94, 0.94, 0.95, 
                                              0.95, 0.95, 0.95, 0.96, 0.96, 
                                              1.00])
        self.assertTrue(allclose(expected_w1bvmetal_lossratio, 
                                 w1bvmetal.mean_loss_ratio),
                        self.msg % (expected_w1bvmetal_lossratio,
                                    w1bvmetal.mean_loss_ratio))
        expected_w1bvmetal_cv = array([0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                       0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                       0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                       0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                       0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                       0.30, 0.30, 0.30, 0.30, 0.30, 0.30, 
                                       0.30, 0.30, 0.30, 0.30, 0.30])
        self.assertTrue(allclose(expected_w1bvmetal_cv, 
                                 w1bvmetal.coefficient_of_variation),
                        self.msg % (expected_w1bvmetal_cv,
                                    w1bvmetal.coefficient_of_variation))
        
    
    def test_calc_mean(self):
        vulnerability_set = self.from_xml()
        
        intensity_level = 9
        
        expected_w1timbermetal_mean = interp(intensity_level, 
                                             [8.99, 9.05], 
                                             [0.13, 0.15])
        expected_w1timbermetal_sigma = expected_w1timbermetal_mean * 0.3
        (w1timbermetal_mean,
         w1timbermetal_sigma) = vulnerability_set.calc_mean('W1TIMBERMETAL', 
                                                            intensity_level)
        self.assertEqual(expected_w1timbermetal_mean, 
                         w1timbermetal_mean,
                         self.msg % (expected_w1timbermetal_mean, 
                                     w1timbermetal_mean))
        self.assertEqual(expected_w1timbermetal_sigma, 
                         w1timbermetal_sigma,
                         self.msg % (expected_w1timbermetal_sigma, 
                                     w1timbermetal_sigma))
        
        expected_w1bvmetal_mean = interp(intensity_level, 
                                         [8.99, 9.05], 
                                         [0.84, 0.85])
        expected_w1bvmetal_sigma = expected_w1bvmetal_mean * 0.3
        (w1bvmetal_mean,
         w1bvmetal_sigma) = vulnerability_set.calc_mean('W1BVMETAL', 
                                                        intensity_level)
        self.assertEqual(expected_w1bvmetal_mean, 
                         w1bvmetal_mean,
                         self.msg % (expected_w1bvmetal_mean, 
                                     w1bvmetal_mean))
        self.assertEqual(expected_w1bvmetal_sigma, 
                         w1bvmetal_sigma,
                         self.msg % (expected_w1bvmetal_sigma, 
                                     w1bvmetal_sigma))
    
    def test_sample(self):
        vulnerability_set = self.from_xml()
        
        intensity_levels = array([8, 9])
        
        (mean,
         sigma) = vulnerability_set.calc_mean('W1BVMETAL', intensity_levels)
        
        sample_values = vulnerability_set.sample('W1BVMETAL', mean, sigma)
        expected_sample_values = mean + 2 * sigma
        self.assertTrue(allclose(sample_values, expected_sample_values),
                        self.msg % (expected_sample_values, sample_values))
    
    def test_ratio_cutoff(self):
        vulnerability_set = self.from_xml()
        
        sample_values = array([-1, -0.5, 0.0, 0.5, 1.0, 1.5])
        
        expected_cutoff_values = array([0.0, 0.0, 0.0, 0.5, 1.0, 1.0])
        cutoff_values = vulnerability_set.ratio_cutoff(sample_values)
        
        self.assertTrue(allclose(cutoff_values, expected_cutoff_values),
                        self.msg % (expected_cutoff_values, cutoff_values))


#-------------------------------------------------------------
if __name__ == "__main__":
    suite = unittest.makeSuite(Test_Vulnerability_Set,'test')
    runner = unittest.TextTestRunner()
    runner.run(suite)
    